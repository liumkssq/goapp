syntax = "v1"

info (
    title: "WebSocket接口定义"
    desc: "提供WebSocket实时通讯功能"
    author: "Campus Team"
    version: "1.0"
)

// WebSocket消息类型定义
type (
    // WebSocket连接请求
    WebSocketConnectReq {
        Token string `form:"token"`
    }

    // WebSocket消息格式
    WSMessage {
        Type string `json:"type"`         // 消息类型
        Data interface{} `json:"data"`    // 消息数据
    }

    // 聊天消息
    ChatMessage {
        MessageId string `json:"messageId"`
        ConversationId string `json:"conversationId"`
        SenderId int64 `json:"senderId"`
        SenderName string `json:"senderName"`
        SenderAvatar string `json:"senderAvatar,optional"`
        Type string `json:"type"` // text, image, audio, video, file, location
        Content string `json:"content"`
        Status string `json:"status"`
        Timestamp string `json:"timestamp"`
        IsRead bool `json:"isRead"`
        Extra map[string]string `json:"extra,optional"`
    }

    // 已读状态消息
    ReadStatusMessage {
        ConversationId string `json:"conversationId"`
        LastReadTime string `json:"lastReadTime"`
        UserId int64 `json:"userId"`
    }

    // 输入状态消息
    TypingStatusMessage {
        ConversationId string `json:"conversationId"`
        UserId int64 `json:"userId"`
        Username string `json:"username"`
        Timestamp int64 `json:"timestamp"`
    }

    // 撤回消息
    RecallMessage {
        MessageId string `json:"messageId"`
        ConversationId string `json:"conversationId"`
        OperatorId int64 `json:"operatorId"`
        OperatorName string `json:"operatorName"`
        Timestamp string `json:"timestamp"`
    }

    // 在线状态变更消息
    OnlineStatusMessage {
        UserId int64 `json:"userId"`
        Status string `json:"status"` // online, offline, away, busy
        LastActiveTime string `json:"lastActiveTime"`
    }

    // 系统通知消息
    SystemNotificationMessage {
        Type string `json:"type"` // 通知类型
        Title string `json:"title"`
        Content string `json:"content"`
        CreatedAt string `json:"createdAt"`
        Data map[string]string `json:"data,optional"`
    }

    // 好友请求消息
    FriendRequestMessage {
        RequestId int64 `json:"requestId"`
        UserId int64 `json:"userId"`
        Username string `json:"username"`
        Avatar string `json:"avatar,optional"`
        Message string `json:"message,optional"`
        CreatedAt string `json:"createdAt"`
    }

    // 群组邀请消息
    GroupInviteMessage {
        InviteId int64 `json:"inviteId"`
        GroupId int64 `json:"groupId"`
        GroupName string `json:"groupName"`
        InviterId int64 `json:"inviterId"`
        InviterName string `json:"inviterName"`
        CreatedAt string `json:"createdAt"`
    }

    // 群组通知消息
    GroupNotificationMessage {
        GroupId int64 `json:"groupId"`
        GroupName string `json:"groupName"`
        Type string `json:"type"` // 通知类型: member_join, member_leave, role_change, group_dismiss
        OperatorId int64 `json:"operatorId"`
        OperatorName string `json:"operatorName"`
        TargetId int64 `json:"targetId,optional"`
        TargetName string `json:"targetName,optional"`
        Content string `json:"content,optional"`
        CreatedAt string `json:"createdAt"`
    }

    // 错误消息
    ErrorMessage {
        Code int `json:"code"`
        Message string `json:"message"`
    }
)

@server(
    prefix: /api/im
    jwt: Auth
    group: im
)
service WebSocket {
    // WebSocket连接
    @handler Connect
    get /ws (WebSocketConnectReq) returns ()
}