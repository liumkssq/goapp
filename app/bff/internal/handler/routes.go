// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1

package handler

import (
	"net/http"

	ProductOp "github.com/liumkssq/goapp/app/bff/internal/handler/ProductOp"
	allsearch "github.com/liumkssq/goapp/app/bff/internal/handler/allsearch"
	friend "github.com/liumkssq/goapp/app/bff/internal/handler/friend"
	group "github.com/liumkssq/goapp/app/bff/internal/handler/group"
	im "github.com/liumkssq/goapp/app/bff/internal/handler/im"
	lostfound "github.com/liumkssq/goapp/app/bff/internal/handler/lostfound"
	lostfoundOp "github.com/liumkssq/goapp/app/bff/internal/handler/lostfoundOp"
	product "github.com/liumkssq/goapp/app/bff/internal/handler/product"
	user "github.com/liumkssq/goapp/app/bff/internal/handler/user"
	userOp "github.com/liumkssq/goapp/app/bff/internal/handler/userOp"
	userSearch "github.com/liumkssq/goapp/app/bff/internal/handler/userSearch"
	"github.com/liumkssq/goapp/app/bff/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/comment/:id",
				Handler: ProductOp.CommentProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/comments/:id",
				Handler: ProductOp.GetProductCommentsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: ProductOp.DeleteProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/favorite/:id",
				Handler: ProductOp.FavoriteProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/favorites",
				Handler: ProductOp.GetFavoriteProductsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/publish",
				Handler: ProductOp.PublishProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/report/:id",
				Handler: ProductOp.ReportProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update/:id",
				Handler: ProductOp.UpdateProductHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/userProduct/:userId",
				Handler: ProductOp.GetUserProductsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: allsearch.GlobalSearchHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/articles",
				Handler: allsearch.SearchArticlesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/hot-keywords",
				Handler: allsearch.GetHotSearchKeywordsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/lostfound",
				Handler: allsearch.SearchLostFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/products",
				Handler: allsearch.SearchProductsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/users",
				Handler: allsearch.SearchUsersHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/search"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 好友申请
				Method:  http.MethodPost,
				Path:    "/friend/putIn",
				Handler: friend.FriendPutInHandler(serverCtx),
			},
			{
				// 好友申请处理
				Method:  http.MethodPut,
				Path:    "/friend/putIn",
				Handler: friend.FriendPutInHandleHandler(serverCtx),
			},
			{
				// 好友申请列表
				Method:  http.MethodGet,
				Path:    "/friend/putIns",
				Handler: friend.FriendPutInListHandler(serverCtx),
			},
			{
				// 好友列表
				Method:  http.MethodGet,
				Path:    "/friends",
				Handler: friend.FriendListHandler(serverCtx),
			},
			{
				// 好友在线情况
				Method:  http.MethodGet,
				Path:    "/friends/online",
				Handler: friend.FriendsOnlineHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/social"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.IdempotenceMiddleware, serverCtx.LimitMiddleware},
			[]rest.Route{
				{
					// 创群
					Method:  http.MethodPost,
					Path:    "/group",
					Handler: group.CreateGroupHandler(serverCtx),
				},
				{
					// 申请进群
					Method:  http.MethodPost,
					Path:    "/group/putIn",
					Handler: group.GroupPutInHandler(serverCtx),
				},
				{
					// 申请进群处理
					Method:  http.MethodPut,
					Path:    "/group/putIn",
					Handler: group.GroupPutInHandleHandler(serverCtx),
				},
				{
					// 申请进群列表
					Method:  http.MethodGet,
					Path:    "/group/putIns",
					Handler: group.GroupPutInListHandler(serverCtx),
				},
				{
					// 成员列表列表
					Method:  http.MethodGet,
					Path:    "/group/users",
					Handler: group.GroupUserListHandler(serverCtx),
				},
				{
					// 群在线用户
					Method:  http.MethodGet,
					Path:    "/group/users/online",
					Handler: group.GroupUserOnlineHandler(serverCtx),
				},
				{
					// 用户申群列表
					Method:  http.MethodGet,
					Path:    "/groups",
					Handler: group.GroupListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/social"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 根据用户获取聊天记录
				Method:  http.MethodGet,
				Path:    "/chatlog",
				Handler: im.GetChatLogHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/chatlog/readRecords",
				Handler: im.GetChatLogReadRecordsHandler(serverCtx),
			},
			{
				// 获取会话
				Method:  http.MethodGet,
				Path:    "/conversation",
				Handler: im.GetConversationsHandler(serverCtx),
			},
			{
				// 更新会话
				Method:  http.MethodPut,
				Path:    "/conversation",
				Handler: im.PutConversationsHandler(serverCtx),
			},
			{
				// 建立会话
				Method:  http.MethodPost,
				Path:    "/setup/conversation",
				Handler: im.SetUpUserConversationHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/im"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/detail/:id",
				Handler: lostfound.GetLostFoundDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: lostfound.GetLostFoundListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/lost-found"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: lostfoundOp.PublishLostFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id",
				Handler: lostfoundOp.UpdateLostFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: lostfoundOp.DeleteLostFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id/comment",
				Handler: lostfoundOp.CommentLostFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/:id/comments",
				Handler: lostfoundOp.GetLostFoundCommentsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id/like",
				Handler: lostfoundOp.LikeLostFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/:id/status",
				Handler: lostfoundOp.UpdateLostFoundStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id/unlike",
				Handler: lostfoundOp.UnlikeLostFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/userLostFound/:userId",
				Handler: lostfoundOp.GetUserLostFoundHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/lost-found"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/categories",
				Handler: product.GetProductCategoriesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail/:id",
				Handler: product.GetProductDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: product.GetProductListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 自动登录（仅用于开发环境测试）
				Method:  http.MethodPost,
				Path:    "/login/auto",
				Handler: user.AutoLoginHandler(serverCtx),
			},
			{
				// 账号密码登录
				Method:  http.MethodPost,
				Path:    "/login/password",
				Handler: user.LoginByPasswordHandler(serverCtx),
			},
			{
				// 验证码登录
				Method:  http.MethodPost,
				Path:    "/login/sms-code",
				Handler: user.LoginByVerificationCodeHandler(serverCtx),
			},
			{
				// 用户注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				// 重置密码
				Method:  http.MethodPost,
				Path:    "/reset-password",
				Handler: user.ResetPasswordHandler(serverCtx),
			},
			{
				// 发送验证码
				Method:  http.MethodPost,
				Path:    "/send-code",
				Handler: user.SendVerificationCodeHandler(serverCtx),
			},
			{
				// 验证验证码
				Method:  http.MethodPost,
				Path:    "/verify-code",
				Handler: user.VerifyCodeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 关注用户
				Method:  http.MethodPost,
				Path:    "/follow/:id",
				Handler: userOp.FollowUserHandler(serverCtx),
			},
			{
				// 获取当前用户信息
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: userOp.GetUserInfoHandler(serverCtx),
			},
			{
				// 更新用户信息
				Method:  http.MethodPut,
				Path:    "/info",
				Handler: userOp.UpdateUserInfoHandler(serverCtx),
			},
			{
				// 退出登录
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: userOp.LogoutHandler(serverCtx),
			},
			{
				// 获取通知
				Method:  http.MethodGet,
				Path:    "/notifications",
				Handler: userOp.GetNotificationsHandler(serverCtx),
			},
			{
				// 标记通知为已读
				Method:  http.MethodPut,
				Path:    "/notifications/:id/read",
				Handler: userOp.MarkNotificationAsReadHandler(serverCtx),
			},
			{
				// 修改密码
				Method:  http.MethodPut,
				Path:    "/password",
				Handler: userOp.ChangePasswordHandler(serverCtx),
			},
			{
				// 获取用户详细资料
				Method:  http.MethodGet,
				Path:    "/profile/:id",
				Handler: userOp.GetUserProfileHandler(serverCtx),
			},
			{
				// 取消关注用户
				Method:  http.MethodPost,
				Path:    "/unfollow/:id",
				Handler: userOp.UnfollowUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/history",
				Handler: userSearch.GetSearchHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/history",
				Handler: userSearch.ClearSearchHistoryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/search"),
	)
}
