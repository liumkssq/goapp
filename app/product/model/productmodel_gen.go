// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFieldNames          = builder.RawFieldNames(&Product{})
	productRows                = strings.Join(productFieldNames, ",")
	productRowsExpectAutoSet   = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productRowsWithPlaceHolder = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappProductIdPrefix = "cache:goapp:product:id:"
)

type (
	productModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Product, error)
		FindByTitle(ctx context.Context, title string) (*Product, error)
		Update(ctx context.Context, session sqlx.Session, data *Product) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		// DeleteSoft 删除商品
		//DeleteSoft(ctx context.Context, session sqlx.Session, data *Product) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*Product, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Product, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Product, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Product, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Product, error)
		Delete(ctx context.Context, session sqlx.Session, id uint64) error
		SearchProduct(ctx context.Context, keyword string, searchType string, page int64, limit int64) ([]*Product, error)
	}

	defaultProductModel struct {
		sqlc.CachedConn
		table string
	}

	Product struct {
		Id             uint64          `db:"id"`              // 主键，商品ID
		Title          string          `db:"title"`           // 商品标题
		Description    string          `db:"description"`     // 商品描述
		Price          float64         `db:"price"`           // 售价，单位元，可用分来存储（如 price*100 作为整数）
		OriginalPrice  sql.NullFloat64 `db:"original_price"`  // 原价，允许为空
		CategoryId     uint64          `db:"category_id"`     // 商品分类ID
		Images         string          `db:"images"`          // 商品图片，建议用 JSON 数组存储多个图片 URL
		Condition      string          `db:"condition"`       // 商品成色
		ContactInfo    sql.NullString  `db:"contact_info"`    // 联系信息，如QQ、微信或其他
		ContactWay     sql.NullString  `db:"contact_way"`     // 联系方式，如电话号码
		Location       sql.NullString  `db:"location"`        // 大致位置，如校区、城市
		LocationDetail sql.NullString  `db:"location_detail"` // 详细位置，例如存储坐标、具体地址
		Tags           sql.NullString  `db:"tags"`            // 标签，存储 JSON 数组
		Status         string          `db:"status"`          // 状态：在售、已售出、待审核、已下架/删除
		SellerId       uint64          `db:"seller_id"`       // 卖家ID
		SellerName     string          `db:"seller_name"`     // 卖家名称
		SellerAvatar   sql.NullString  `db:"seller_avatar"`   // 卖家头像URL
		ViewCount      uint64          `db:"view_count"`      // 浏览数
		LikeCount      uint64          `db:"like_count"`      // 点赞数
		CommentCount   uint64          `db:"comment_count"`   // 评论数
		CreatedAt      time.Time       `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time       `db:"updated_at"`      // 更新时间
	}
)

func (m *defaultProductModel) Insert(ctx context.Context, session sqlx.Session, data *Product) (sql.Result, error) {
	cacheKey := fmt.Sprintf("%s%v", cacheGoappProductIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		//query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productRowsExpectAutoSet)
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query,
				data.Title, data.Description, data.Price, data.OriginalPrice, data.CategoryId, data.Images,
				data.Condition, data.ContactInfo, data.ContactWay, data.Location, data.LocationDetail,
				data.Tags, data.Status, data.SellerId, data.SellerName, data.SellerAvatar,
				data.ViewCount, data.LikeCount, data.CommentCount)
		}
		return conn.ExecCtx(ctx, query,
			data.Title, data.Description, data.Price, data.OriginalPrice, data.CategoryId, data.Images,
			data.Condition, data.ContactInfo, data.ContactWay, data.Location, data.LocationDetail,
			data.Tags, data.Status, data.SellerId, data.SellerName, data.SellerAvatar,
			data.ViewCount, data.LikeCount, data.CommentCount)
	}, cacheKey)
	if err != nil {
		return nil, err
	}
	// 清除缓存
	//m.DelCache(ctx, cacheKey)
	return ret, nil
}

func (m *defaultProductModel) SearchProduct(ctx context.Context, keyword string, searchType string, page int64, limit int64) ([]*Product, error) {
	var resp []*Product
	// 处理搜索条件
	var whereClause string
	if searchType == "title" {
		whereClause = fmt.Sprintf("title LIKE '%%%s%%'", keyword)
	} else if searchType == "description" {
		whereClause = fmt.Sprintf("description LIKE '%%%s%%'", keyword)
	} else if searchType == "tags" {
		whereClause = fmt.Sprintf("tags LIKE '%%%s%%'", keyword)
	} else {
		//find all case
		whereClause = fmt.Sprintf("title LIKE '%%%s%%' OR description LIKE '%%%s%%' OR tags LIKE '%%%s%%'", keyword, keyword, keyword)
	}
	// 处理分页
	if page < 1 {
		page = 1
	} else {
		page = page - 1
	}
	if limit < 1 {
		limit = 10
	}
	offset := (page - 1) * limit
	// 构建 SQL 查询
	query := fmt.Sprintf("SELECT %s FROM %s WHERE %s LIMIT %d OFFSET %d", productRows, m.table, whereClause, limit, offset)
	// 执行查询
	err := m.QueryRowsNoCache(&resp, query)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultProductModel) Update(ctx context.Context, session sqlx.Session, data *Product) error {
	//TODO implement me
	panic("implement me")
}

func (m *defaultProductModel) Delete(ctx context.Context, session sqlx.Session, id uint64) error {
	//TODO implement me
	panic("implement me")
}

func (m *defaultProductModel) FindByTitle(ctx context.Context, title string) (*Product, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultProductModel) Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultProductModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultProductModel) FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error) {
	sumBuilder = sumBuilder.Columns("sum(" + field + ")")
	query, values, err := sumBuilder.ToSql()
	if err != nil {
		return 0, err
	}
	var sum float64
	err = m.QueryRowNoCache(&sum, query, values...)
	if err != nil {
		return 0, err
	}
	return sum, nil
}

func (m *defaultProductModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error) {
	countBuilder = countBuilder.Columns("count(*)")
	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}
	var count int64
	err = m.QueryRowNoCache(&count, query, values...)
	if err != nil {
		return 0, err
	}
	return count, nil
}

func (m *defaultProductModel) FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*Product, error) {
	// order by
	selectBuilder := rowBuilder.Columns(productRows)
	if orderBy == "" {
		selectBuilder = selectBuilder.OrderBy("`id` desc")
	} else {
		selectBuilder = selectBuilder.OrderBy(orderBy)
	}
	query, values, err := selectBuilder.ToSql()
	if err != nil {
		return nil, err
	}
	// 执行查询
	var resp []*Product
	err = m.QueryRowsNoCache(&resp, query, values...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultProductModel) FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Product, error) {
	// order by
	selectBuilder := rowBuilder.Columns(productRows)
	if orderBy == "" {
		selectBuilder = selectBuilder.OrderBy("`id` desc")
	} else {
		selectBuilder = selectBuilder.OrderBy(orderBy)
	}
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	query, values, err := selectBuilder.Where("`id` > 1").Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}
	// 执行查询
	var resp []*Product
	err = m.QueryRowsNoCache(&resp, query, values...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultProductModel) FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Product, int64, error) {
	// order by
	selectBuilder := rowBuilder.Columns(productRows)
	if orderBy == "" {
		selectBuilder = selectBuilder.OrderBy("`id` desc")
	} else {
		selectBuilder = selectBuilder.OrderBy(orderBy)
	}
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	query, values, err := selectBuilder.Where("`id` > 1").Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, 0, err
	}
	// 执行查询
	var resp []*Product
	err = m.QueryRowsNoCache(&resp, query, values...)
	if err != nil {
		return nil, 0, err
	}
	countQuery, countValues, err := rowBuilder.ToSql()
	if err != nil {
		return nil, 0, err
	}
	var total int64
	err = m.QueryRowNoCache(&total, countQuery, countValues...)
	if err != nil {
		return nil, 0, err
	}
	return resp, total, nil
}

func (m *defaultProductModel) FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Product, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultProductModel) FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Product, error) {
	//TODO implement me
	panic("implement me")
}

func newProductModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductModel {
	return &defaultProductModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product`",
	}
}

//func (m *defaultProductModel) Delete(ctx context.Context, id uint64) error {
//	goappProductIdKey := fmt.Sprintf("%s%v", cacheGoappProductIdPrefix, id)
//	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
//		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
//		return conn.ExecCtx(ctx, query, id)
//	}, goappProductIdKey)
//	return err
//}

func (m *defaultProductModel) FindOne(ctx context.Context, id uint64) (*Product, error) {
	goappProductIdKey := fmt.Sprintf("%s%v", cacheGoappProductIdPrefix, id)
	var resp Product
	err := m.QueryRowCtx(ctx, &resp, goappProductIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
//	goappProductIdKey := fmt.Sprintf("%s%v", cacheGoappProductIdPrefix, data.Id)
//	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
//		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productRowsExpectAutoSet)
//		return conn.ExecCtx(ctx, query, data.Title, data.Description, data.Price, data.OriginalPrice, data.CategoryId, data.Images, data.Condition, data.ContactInfo, data.ContactWay, data.Location, data.LocationDetail, data.Tags, data.Status, data.SellerId, data.SellerName, data.SellerAvatar, data.ViewCount, data.LikeCount, data.CommentCount)
//	}, goappProductIdKey)
//	return ret, err
//}

//func (m *defaultProductModel) Update(ctx context.Context, data *Product) error {
//	goappProductIdKey := fmt.Sprintf("%s%v", cacheGoappProductIdPrefix, data.Id)
//	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
//		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productRowsWithPlaceHolder)
//		return conn.ExecCtx(ctx, query, data.Title, data.Description, data.Price, data.OriginalPrice, data.CategoryId, data.Images, data.Condition, data.ContactInfo, data.ContactWay, data.Location, data.LocationDetail, data.Tags, data.Status, data.SellerId, data.SellerName, data.SellerAvatar, data.ViewCount, data.LikeCount, data.CommentCount, data.Id)
//	}, goappProductIdKey)
//	return err
//}

func (m *defaultProductModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappProductIdPrefix, primary)
}

func (m *defaultProductModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
