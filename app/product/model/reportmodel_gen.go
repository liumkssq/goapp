// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	reportFieldNames          = builder.RawFieldNames(&Report{})
	reportRows                = strings.Join(reportFieldNames, ",")
	reportRowsExpectAutoSet   = strings.Join(stringx.Remove(reportFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	reportRowsWithPlaceHolder = strings.Join(stringx.Remove(reportFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappReportIdPrefix = "cache:goapp:report:id:"
)

type (
	reportModel interface {
		Insert(ctx context.Context, data *Report) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Report, error)
		Update(ctx context.Context, data *Report) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultReportModel struct {
		sqlc.CachedConn
		table string
	}

	Report struct {
		Id          uint64         `db:"id"`          // 举报ID
		ProductId   uint64         `db:"product_id"`  // 被举报商品ID
		UserId      uint64         `db:"user_id"`     // 举报用户ID
		Reason      string         `db:"reason"`      // 举报原因
		Description sql.NullString `db:"description"` // 举报详情
		Images      sql.NullString `db:"images"`      // 举报证据图片，存储图片 URL 列表
		CreatedAt   time.Time      `db:"created_at"`  // 举报时间
	}
)

func newReportModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultReportModel {
	return &defaultReportModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`report`",
	}
}

func (m *defaultReportModel) Delete(ctx context.Context, id uint64) error {
	goappReportIdKey := fmt.Sprintf("%s%v", cacheGoappReportIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goappReportIdKey)
	return err
}

func (m *defaultReportModel) FindOne(ctx context.Context, id uint64) (*Report, error) {
	goappReportIdKey := fmt.Sprintf("%s%v", cacheGoappReportIdPrefix, id)
	var resp Report
	err := m.QueryRowCtx(ctx, &resp, goappReportIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reportRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReportModel) Insert(ctx context.Context, data *Report) (sql.Result, error) {
	goappReportIdKey := fmt.Sprintf("%s%v", cacheGoappReportIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, reportRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductId, data.UserId, data.Reason, data.Description, data.Images)
	}, goappReportIdKey)
	return ret, err
}

func (m *defaultReportModel) Update(ctx context.Context, data *Report) error {
	goappReportIdKey := fmt.Sprintf("%s%v", cacheGoappReportIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, reportRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProductId, data.UserId, data.Reason, data.Description, data.Images, data.Id)
	}, goappReportIdKey)
	return err
}

func (m *defaultReportModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappReportIdPrefix, primary)
}

func (m *defaultReportModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", reportRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReportModel) tableName() string {
	return m.table
}
