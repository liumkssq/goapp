// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.9
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_GetProductList_FullMethodName       = "/product.ProductService/GetProductList"
	ProductService_GetProductDetail_FullMethodName     = "/product.ProductService/GetProductDetail"
	ProductService_GetProductCategories_FullMethodName = "/product.ProductService/GetProductCategories"
	ProductService_PublishProduct_FullMethodName       = "/product.ProductService/PublishProduct"
	ProductService_UpdateProduct_FullMethodName        = "/product.ProductService/UpdateProduct"
	ProductService_DeleteProduct_FullMethodName        = "/product.ProductService/DeleteProduct"
	ProductService_GetUserProducts_FullMethodName      = "/product.ProductService/GetUserProducts"
	ProductService_FavoriteProduct_FullMethodName      = "/product.ProductService/FavoriteProduct"
	ProductService_GetFavoriteProducts_FullMethodName  = "/product.ProductService/GetFavoriteProducts"
	ProductService_ReportProduct_FullMethodName        = "/product.ProductService/ReportProduct"
	ProductService_CommentProduct_FullMethodName       = "/product.ProductService/CommentProduct"
	ProductService_GetProductComments_FullMethodName   = "/product.ProductService/GetProductComments"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 商品服务
type ProductServiceClient interface {
	// 获取商品列表
	GetProductList(ctx context.Context, in *GetProductListRequest, opts ...grpc.CallOption) (*GetProductListResponse, error)
	// 获取商品详情
	GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error)
	// 获取商品分类
	GetProductCategories(ctx context.Context, in *GetProductCategoriesRequest, opts ...grpc.CallOption) (*GetProductCategoriesResponse, error)
	// 发布商品
	PublishProduct(ctx context.Context, in *PublishProductRequest, opts ...grpc.CallOption) (*PublishProductResponse, error)
	// 更新商品
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	// 删除商品
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	// 获取用户的商品
	GetUserProducts(ctx context.Context, in *GetUserProductsRequest, opts ...grpc.CallOption) (*GetUserProductsResponse, error)
	// 收藏/取消收藏商品
	FavoriteProduct(ctx context.Context, in *FavoriteProductRequest, opts ...grpc.CallOption) (*FavoriteProductResponse, error)
	// 获取收藏的商品
	GetFavoriteProducts(ctx context.Context, in *GetFavoriteProductsRequest, opts ...grpc.CallOption) (*GetFavoriteProductsResponse, error)
	// 举报商品
	ReportProduct(ctx context.Context, in *ReportProductRequest, opts ...grpc.CallOption) (*ReportProductResponse, error)
	// 评论商品
	CommentProduct(ctx context.Context, in *CommentProductRequest, opts ...grpc.CallOption) (*CommentProductResponse, error)
	// 获取商品评论
	GetProductComments(ctx context.Context, in *GetProductCommentsRequest, opts ...grpc.CallOption) (*GetProductCommentsResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProductList(ctx context.Context, in *GetProductListRequest, opts ...grpc.CallOption) (*GetProductListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductListResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductCategories(ctx context.Context, in *GetProductCategoriesRequest, opts ...grpc.CallOption) (*GetProductCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductCategoriesResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) PublishProduct(ctx context.Context, in *PublishProductRequest, opts ...grpc.CallOption) (*PublishProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishProductResponse)
	err := c.cc.Invoke(ctx, ProductService_PublishProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetUserProducts(ctx context.Context, in *GetUserProductsRequest, opts ...grpc.CallOption) (*GetUserProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetUserProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) FavoriteProduct(ctx context.Context, in *FavoriteProductRequest, opts ...grpc.CallOption) (*FavoriteProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteProductResponse)
	err := c.cc.Invoke(ctx, ProductService_FavoriteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetFavoriteProducts(ctx context.Context, in *GetFavoriteProductsRequest, opts ...grpc.CallOption) (*GetFavoriteProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoriteProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetFavoriteProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReportProduct(ctx context.Context, in *ReportProductRequest, opts ...grpc.CallOption) (*ReportProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportProductResponse)
	err := c.cc.Invoke(ctx, ProductService_ReportProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CommentProduct(ctx context.Context, in *CommentProductRequest, opts ...grpc.CallOption) (*CommentProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentProductResponse)
	err := c.cc.Invoke(ctx, ProductService_CommentProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductComments(ctx context.Context, in *GetProductCommentsRequest, opts ...grpc.CallOption) (*GetProductCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductCommentsResponse)
	err := c.cc.Invoke(ctx, ProductService_GetProductComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
//
// 商品服务
type ProductServiceServer interface {
	// 获取商品列表
	GetProductList(context.Context, *GetProductListRequest) (*GetProductListResponse, error)
	// 获取商品详情
	GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error)
	// 获取商品分类
	GetProductCategories(context.Context, *GetProductCategoriesRequest) (*GetProductCategoriesResponse, error)
	// 发布商品
	PublishProduct(context.Context, *PublishProductRequest) (*PublishProductResponse, error)
	// 更新商品
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	// 删除商品
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	// 获取用户的商品
	GetUserProducts(context.Context, *GetUserProductsRequest) (*GetUserProductsResponse, error)
	// 收藏/取消收藏商品
	FavoriteProduct(context.Context, *FavoriteProductRequest) (*FavoriteProductResponse, error)
	// 获取收藏的商品
	GetFavoriteProducts(context.Context, *GetFavoriteProductsRequest) (*GetFavoriteProductsResponse, error)
	// 举报商品
	ReportProduct(context.Context, *ReportProductRequest) (*ReportProductResponse, error)
	// 评论商品
	CommentProduct(context.Context, *CommentProductRequest) (*CommentProductResponse, error)
	// 获取商品评论
	GetProductComments(context.Context, *GetProductCommentsRequest) (*GetProductCommentsResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) GetProductList(context.Context, *GetProductListRequest) (*GetProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedProductServiceServer) GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedProductServiceServer) GetProductCategories(context.Context, *GetProductCategoriesRequest) (*GetProductCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategories not implemented")
}
func (UnimplementedProductServiceServer) PublishProduct(context.Context, *PublishProductRequest) (*PublishProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishProduct not implemented")
}
func (UnimplementedProductServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) GetUserProducts(context.Context, *GetUserProductsRequest) (*GetUserProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProducts not implemented")
}
func (UnimplementedProductServiceServer) FavoriteProduct(context.Context, *FavoriteProductRequest) (*FavoriteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteProduct not implemented")
}
func (UnimplementedProductServiceServer) GetFavoriteProducts(context.Context, *GetFavoriteProductsRequest) (*GetFavoriteProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteProducts not implemented")
}
func (UnimplementedProductServiceServer) ReportProduct(context.Context, *ReportProductRequest) (*ReportProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProduct not implemented")
}
func (UnimplementedProductServiceServer) CommentProduct(context.Context, *CommentProductRequest) (*CommentProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentProduct not implemented")
}
func (UnimplementedProductServiceServer) GetProductComments(context.Context, *GetProductCommentsRequest) (*GetProductCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductComments not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductList(ctx, req.(*GetProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductDetail(ctx, req.(*GetProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductCategories(ctx, req.(*GetProductCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_PublishProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).PublishProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_PublishProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).PublishProduct(ctx, req.(*PublishProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetUserProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetUserProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetUserProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetUserProducts(ctx, req.(*GetUserProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_FavoriteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).FavoriteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_FavoriteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).FavoriteProduct(ctx, req.(*FavoriteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetFavoriteProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetFavoriteProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetFavoriteProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetFavoriteProducts(ctx, req.(*GetFavoriteProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ReportProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ReportProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ReportProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ReportProduct(ctx, req.(*ReportProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CommentProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CommentProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CommentProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CommentProduct(ctx, req.(*CommentProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductComments(ctx, req.(*GetProductCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductList",
			Handler:    _ProductService_GetProductList_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _ProductService_GetProductDetail_Handler,
		},
		{
			MethodName: "GetProductCategories",
			Handler:    _ProductService_GetProductCategories_Handler,
		},
		{
			MethodName: "PublishProduct",
			Handler:    _ProductService_PublishProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "GetUserProducts",
			Handler:    _ProductService_GetUserProducts_Handler,
		},
		{
			MethodName: "FavoriteProduct",
			Handler:    _ProductService_FavoriteProduct_Handler,
		},
		{
			MethodName: "GetFavoriteProducts",
			Handler:    _ProductService_GetFavoriteProducts_Handler,
		},
		{
			MethodName: "ReportProduct",
			Handler:    _ProductService_ReportProduct_Handler,
		},
		{
			MethodName: "CommentProduct",
			Handler:    _ProductService_CommentProduct_Handler,
		},
		{
			MethodName: "GetProductComments",
			Handler:    _ProductService_GetProductComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
