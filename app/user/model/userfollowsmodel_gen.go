// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFollowsFieldNames          = builder.RawFieldNames(&UserFollows{})
	userFollowsRows                = strings.Join(userFollowsFieldNames, ",")
	userFollowsRowsExpectAutoSet   = strings.Join(stringx.Remove(userFollowsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userFollowsRowsWithPlaceHolder = strings.Join(stringx.Remove(userFollowsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappUserFollowsIdPrefix                 = "cache:goapp:userFollows:id:"
	cacheGoappUserFollowsUserIdFollowUserIdPrefix = "cache:goapp:userFollows:userId:followUserId:"
)

type (
	userFollowsModel interface {
		Insert(ctx context.Context, data *UserFollows) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserFollows, error)
		FindOneByUserIdFollowUserId(ctx context.Context, userId uint64, followUserId uint64) (*UserFollows, error)
		Update(ctx context.Context, data *UserFollows) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserFollowsModel struct {
		sqlc.CachedConn
		table string
	}

	UserFollows struct {
		Id           uint64       `db:"id"`             // 关注记录ID
		UserId       uint64       `db:"user_id"`        // 用户ID
		FollowUserId uint64       `db:"follow_user_id"` // 被关注用户ID
		CreateTime   time.Time    `db:"create_time"`    // 创建时间
		UpdateTime   time.Time    `db:"update_time"`    // 更新时间
		DeleteTime   sql.NullTime `db:"delete_time"`    // 删除时间
		DelState     int64        `db:"del_state"`      // 删除状态: 0-正常, 1-已删除
	}
)

func newUserFollowsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserFollowsModel {
	return &defaultUserFollowsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_follows`",
	}
}

func (m *defaultUserFollowsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goappUserFollowsIdKey := fmt.Sprintf("%s%v", cacheGoappUserFollowsIdPrefix, id)
	goappUserFollowsUserIdFollowUserIdKey := fmt.Sprintf("%s%v:%v", cacheGoappUserFollowsUserIdFollowUserIdPrefix, data.UserId, data.FollowUserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goappUserFollowsIdKey, goappUserFollowsUserIdFollowUserIdKey)
	return err
}

func (m *defaultUserFollowsModel) FindOne(ctx context.Context, id uint64) (*UserFollows, error) {
	goappUserFollowsIdKey := fmt.Sprintf("%s%v", cacheGoappUserFollowsIdPrefix, id)
	var resp UserFollows
	err := m.QueryRowCtx(ctx, &resp, goappUserFollowsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFollowsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFollowsModel) FindOneByUserIdFollowUserId(ctx context.Context, userId uint64, followUserId uint64) (*UserFollows, error) {
	goappUserFollowsUserIdFollowUserIdKey := fmt.Sprintf("%s%v:%v", cacheGoappUserFollowsUserIdFollowUserIdPrefix, userId, followUserId)
	var resp UserFollows
	err := m.QueryRowIndexCtx(ctx, &resp, goappUserFollowsUserIdFollowUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `follow_user_id` = ? limit 1", userFollowsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, followUserId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFollowsModel) Insert(ctx context.Context, data *UserFollows) (sql.Result, error) {
	goappUserFollowsIdKey := fmt.Sprintf("%s%v", cacheGoappUserFollowsIdPrefix, data.Id)
	goappUserFollowsUserIdFollowUserIdKey := fmt.Sprintf("%s%v:%v", cacheGoappUserFollowsUserIdFollowUserIdPrefix, data.UserId, data.FollowUserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userFollowsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FollowUserId, data.DeleteTime, data.DelState)
	}, goappUserFollowsIdKey, goappUserFollowsUserIdFollowUserIdKey)
	return ret, err
}

func (m *defaultUserFollowsModel) Update(ctx context.Context, newData *UserFollows) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goappUserFollowsIdKey := fmt.Sprintf("%s%v", cacheGoappUserFollowsIdPrefix, data.Id)
	goappUserFollowsUserIdFollowUserIdKey := fmt.Sprintf("%s%v:%v", cacheGoappUserFollowsUserIdFollowUserIdPrefix, data.UserId, data.FollowUserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFollowsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.FollowUserId, newData.DeleteTime, newData.DelState, newData.Id)
	}, goappUserFollowsIdKey, goappUserFollowsUserIdFollowUserIdKey)
	return err
}

func (m *defaultUserFollowsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappUserFollowsIdPrefix, primary)
}

func (m *defaultUserFollowsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFollowsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserFollowsModel) tableName() string {
	return m.table
}
