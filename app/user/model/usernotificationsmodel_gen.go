// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userNotificationsFieldNames          = builder.RawFieldNames(&UserNotifications{})
	userNotificationsRows                = strings.Join(userNotificationsFieldNames, ",")
	userNotificationsRowsExpectAutoSet   = strings.Join(stringx.Remove(userNotificationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userNotificationsRowsWithPlaceHolder = strings.Join(stringx.Remove(userNotificationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappUserNotificationsIdPrefix = "cache:goapp:userNotifications:id:"
)

type (
	userNotificationsModel interface {
		Insert(ctx context.Context, data *UserNotifications) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserNotifications, error)
		Update(ctx context.Context, data *UserNotifications) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserNotificationsModel struct {
		sqlc.CachedConn
		table string
	}

	UserNotifications struct {
		Id          uint64         `db:"id"`           // 通知ID
		UserId      uint64         `db:"user_id"`      // 接收用户ID
		Type        string         `db:"type"`         // 通知类型
		Content     string         `db:"content"`      // 通知内容
		IsRead      int64          `db:"is_read"`      // 是否已读: 0-未读, 1-已读
		RelatedId   sql.NullInt64  `db:"related_id"`   // 相关ID
		RelatedType sql.NullString `db:"related_type"` // 相关类型
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
		UpdateTime  time.Time      `db:"update_time"`  // 更新时间
		DeleteTime  sql.NullTime   `db:"delete_time"`  // 删除时间
		DelState    int64          `db:"del_state"`    // 删除状态: 0-正常, 1-已删除
	}
)

func newUserNotificationsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserNotificationsModel {
	return &defaultUserNotificationsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_notifications`",
	}
}

func (m *defaultUserNotificationsModel) Delete(ctx context.Context, id uint64) error {
	goappUserNotificationsIdKey := fmt.Sprintf("%s%v", cacheGoappUserNotificationsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goappUserNotificationsIdKey)
	return err
}

func (m *defaultUserNotificationsModel) FindOne(ctx context.Context, id uint64) (*UserNotifications, error) {
	goappUserNotificationsIdKey := fmt.Sprintf("%s%v", cacheGoappUserNotificationsIdPrefix, id)
	var resp UserNotifications
	err := m.QueryRowCtx(ctx, &resp, goappUserNotificationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userNotificationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserNotificationsModel) Insert(ctx context.Context, data *UserNotifications) (sql.Result, error) {
	goappUserNotificationsIdKey := fmt.Sprintf("%s%v", cacheGoappUserNotificationsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, userNotificationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Content, data.IsRead, data.RelatedId, data.RelatedType, data.DeleteTime, data.DelState)
	}, goappUserNotificationsIdKey)
	return ret, err
}

func (m *defaultUserNotificationsModel) Update(ctx context.Context, data *UserNotifications) error {
	goappUserNotificationsIdKey := fmt.Sprintf("%s%v", cacheGoappUserNotificationsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userNotificationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Content, data.IsRead, data.RelatedId, data.RelatedType, data.DeleteTime, data.DelState, data.Id)
	}, goappUserNotificationsIdKey)
	return err
}

func (m *defaultUserNotificationsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappUserNotificationsIdPrefix, primary)
}

func (m *defaultUserNotificationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userNotificationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserNotificationsModel) tableName() string {
	return m.table
}
