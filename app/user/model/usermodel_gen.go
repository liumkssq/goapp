// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"github.com/liumkssq/goapp/pkg/globalkey"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappUserIdPrefix       = "cache:goapp:user:id:"
	cacheGoappUserPhonePrefix    = "cache:goapp:user:phone:"
	cacheGoappUserUsernamePrefix = "cache:goapp:user:username:"
)

type (
	userModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*User, error)
		FindOneByPhone(ctx context.Context, phone string) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id uint64) error
		Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		SearchUser(ctx context.Context, keyword string, searchType string, page int64, limit int64) ([]*User, error)
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id           uint64         `db:"id"`            // 用户ID
		Username     string         `db:"username"`      // 用户名
		Phone        string         `db:"phone"`         // 手机号
		PasswordHash string         `db:"password_hash"` // 密码哈希
		Nickname     sql.NullString `db:"nickname"`      // 用户昵称
		AvatarUrl    sql.NullString `db:"avatar_url"`    // 头像URL
		UserStatus   int64          `db:"user_status"`   // 状态: 0-禁用, 1-正常, 2-待验证
		Version      uint64         `db:"version"`       // 版本号
		Sex          int64          `db:"sex"`           // 性别: 0-未知, 1-男, 2-女
		Bio          sql.NullString `db:"bio"`           // 个人简介
		LastLoginAt  sql.NullTime   `db:"last_login_at"` // 最后登录时间
		LastLoginIp  sql.NullString `db:"last_login_ip"` // 最后登录IP
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		UpdateTime   time.Time      `db:"update_time"`   // 更新时间
		DeleteTime   sql.NullTime   `db:"delete_time"`   // 删除时间
		DelState     int64          `db:"del_state"`     // 删除状态: 0-正常, 1-已删除
	}
)

func (m *defaultUserModel) SearchUser(ctx context.Context, keyword string, searchType string, page int64, limit int64) ([]*User, error) {
	rowBuilder := squirrel.Select().From(m.table)
	// 添加过滤条件
	if len(keyword) > 0 {
		rowBuilder = rowBuilder.Where("`username` LIKE ? or `phone` LIKE ?", "%"+keyword+"%", "%"+keyword+"%")
	}

	if searchType == "phone" {
		rowBuilder = rowBuilder.Where("`phone` LIKE ?", "%"+keyword+"%")
	} else if searchType == "username" {
		rowBuilder = rowBuilder.Where("`username` LIKE ?", "%"+keyword+"%")
	} else {
		rowBuilder = rowBuilder.Where("`username` LIKE ? or `phone` LIKE ?", "%"+keyword+"%", "%"+keyword+"%")
	}

	// 设置分页参数
	pageSize := limit
	if pageSize < 1 || pageSize > 100 {
		pageSize = 10
	}
	offset := (page - 1) * pageSize

	query, args, err := rowBuilder.OrderBy("id desc").Limit(uint64(pageSize)).Offset(uint64(offset)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*User
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, args...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultUserModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultUserModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goappUserIdKey := fmt.Sprintf("%s%v", cacheGoappUserIdPrefix, id)
	goappUserPhoneKey := fmt.Sprintf("%s%v", cacheGoappUserPhonePrefix, data.Phone)
	goappUserUsernameKey := fmt.Sprintf("%s%v", cacheGoappUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goappUserIdKey, goappUserPhoneKey, goappUserUsernameKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id uint64) (*User, error) {
	goappUserIdKey := fmt.Sprintf("%s%v", cacheGoappUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, goappUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByPhone(ctx context.Context, phone string) (*User, error) {
	goappUserPhoneKey := fmt.Sprintf("%s%v", cacheGoappUserPhonePrefix, phone)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, goappUserPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? and del_state = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	goappUserUsernameKey := fmt.Sprintf("%s%v", cacheGoappUserUsernamePrefix, username)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, goappUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(
	ctx context.Context, session sqlx.Session, data *User) (sql.Result, error) {
	data.DelState = globalkey.DelStateNo
	goappUserIdKey := fmt.Sprintf("%s%v", cacheGoappUserIdPrefix, data.Id)
	goappUserPhoneKey := fmt.Sprintf("%s%v", cacheGoappUserPhonePrefix, data.Phone)
	goappUserUsernameKey := fmt.Sprintf("%s%v", cacheGoappUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		//
		if session != nil {
			return session.ExecCtx(
				ctx,
				query,
				data.Username,
				data.Phone,
				data.PasswordHash,
				data.Nickname,
				data.AvatarUrl,
				data.UserStatus,
				data.Version,
				data.Sex,
				data.Bio,
				data.LastLoginAt,
				data.LastLoginIp,
				data.DeleteTime,
				data.DelState,
			)
		}
		return conn.ExecCtx(ctx, query, data.Username, data.Phone, data.PasswordHash, data.Nickname, data.AvatarUrl, data.UserStatus, data.Version, data.Sex, data.Bio, data.LastLoginAt, data.LastLoginIp, data.DeleteTime, data.DelState)
	}, goappUserIdKey, goappUserPhoneKey, goappUserUsernameKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goappUserIdKey := fmt.Sprintf("%s%v", cacheGoappUserIdPrefix, data.Id)
	goappUserPhoneKey := fmt.Sprintf("%s%v", cacheGoappUserPhonePrefix, data.Phone)
	goappUserUsernameKey := fmt.Sprintf("%s%v", cacheGoappUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Phone, newData.PasswordHash, newData.Nickname, newData.AvatarUrl, newData.UserStatus, newData.Version, newData.Sex, newData.Bio, newData.LastLoginAt, newData.LastLoginIp, newData.DeleteTime, newData.DelState, newData.Id)
	}, goappUserIdKey, goappUserPhoneKey, goappUserUsernameKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
