// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: user.proto

package server

import (
	"context"

	"github.com/liumkssq/goapp/app/user/rpc/internal/logic"
	"github.com/liumkssq/goapp/app/user/rpc/internal/svc"
	"github.com/liumkssq/goapp/app/user/rpc/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// 账号密码登录
func (s *UserServiceServer) LoginByPassword(ctx context.Context, in *user.LoginByPasswordRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginByPasswordLogic(ctx, s.svcCtx)
	return l.LoginByPassword(in)
}

// 验证码登录
func (s *UserServiceServer) LoginByVerificationCode(ctx context.Context, in *user.LoginByVerificationCodeRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginByVerificationCodeLogic(ctx, s.svcCtx)
	return l.LoginByVerificationCode(in)
}

// 自动登录（仅用于开发环境测试）
func (s *UserServiceServer) AutoLogin(ctx context.Context, in *user.AutoLoginRequest) (*user.LoginResponse, error) {
	l := logic.NewAutoLoginLogic(ctx, s.svcCtx)
	return l.AutoLogin(in)
}

// 用户注册
func (s *UserServiceServer) Register(ctx context.Context, in *user.RegisterRequest) (*user.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 发送验证码
func (s *UserServiceServer) SendVerificationCode(ctx context.Context, in *user.SendVerificationCodeRequest) (*user.SendVerificationCodeResponse, error) {
	l := logic.NewSendVerificationCodeLogic(ctx, s.svcCtx)
	return l.SendVerificationCode(in)
}

// 验证验证码
func (s *UserServiceServer) VerifyCode(ctx context.Context, in *user.VerifyCodeRequest) (*user.VerifyCodeResponse, error) {
	l := logic.NewVerifyCodeLogic(ctx, s.svcCtx)
	return l.VerifyCode(in)
}

// 重置密码
func (s *UserServiceServer) ResetPassword(ctx context.Context, in *user.ResetPasswordRequest) (*user.ResetPasswordResponse, error) {
	l := logic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

// 获取当前用户信息
func (s *UserServiceServer) GetUserInfo(ctx context.Context, in *user.GetUserInfoRequest) (*user.UserInfoResponse, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

// 获取用户详细资料
func (s *UserServiceServer) GetUserProfile(ctx context.Context, in *user.GetUserProfileRequest) (*user.UserProfileResponse, error) {
	l := logic.NewGetUserProfileLogic(ctx, s.svcCtx)
	return l.GetUserProfile(in)
}

// 更新用户信息
func (s *UserServiceServer) UpdateUserInfo(ctx context.Context, in *user.UpdateUserInfoRequest) (*user.UpdateUserInfoResponse, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

// 修改密码
func (s *UserServiceServer) ChangePassword(ctx context.Context, in *user.ChangePasswordRequest) (*user.ChangePasswordResponse, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

// 退出登录
func (s *UserServiceServer) Logout(ctx context.Context, in *user.LogoutRequest) (*user.LogoutResponse, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

// 关注用户
func (s *UserServiceServer) FollowUser(ctx context.Context, in *user.FollowUserRequest) (*user.FollowUserResponse, error) {
	l := logic.NewFollowUserLogic(ctx, s.svcCtx)
	return l.FollowUser(in)
}

// 取消关注用户
func (s *UserServiceServer) UnfollowUser(ctx context.Context, in *user.UnfollowUserRequest) (*user.UnfollowUserResponse, error) {
	l := logic.NewUnfollowUserLogic(ctx, s.svcCtx)
	return l.UnfollowUser(in)
}

// 获取通知
func (s *UserServiceServer) GetNotifications(ctx context.Context, in *user.GetNotificationsRequest) (*user.NotificationListResponse, error) {
	l := logic.NewGetNotificationsLogic(ctx, s.svcCtx)
	return l.GetNotifications(in)
}

// 标记通知为已读
func (s *UserServiceServer) MarkNotificationAsRead(ctx context.Context, in *user.MarkNotificationAsReadRequest) (*user.MarkNotificationAsReadResponse, error) {
	l := logic.NewMarkNotificationAsReadLogic(ctx, s.svcCtx)
	return l.MarkNotificationAsRead(in)
}
