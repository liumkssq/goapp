// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: user.proto

package userservice

import (
	"context"

	"github.com/liumkssq/goapp/app/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AutoLoginRequest               = user.AutoLoginRequest
	ChangePasswordRequest          = user.ChangePasswordRequest
	ChangePasswordResponse         = user.ChangePasswordResponse
	Empty                          = user.Empty
	FollowUserRequest              = user.FollowUserRequest
	FollowUserResponse             = user.FollowUserResponse
	GetNotificationsRequest        = user.GetNotificationsRequest
	GetUserInfoRequest             = user.GetUserInfoRequest
	GetUserProfileRequest          = user.GetUserProfileRequest
	LoginByPasswordRequest         = user.LoginByPasswordRequest
	LoginByVerificationCodeRequest = user.LoginByVerificationCodeRequest
	LoginResponse                  = user.LoginResponse
	LogoutRequest                  = user.LogoutRequest
	LogoutResponse                 = user.LogoutResponse
	MarkNotificationAsReadRequest  = user.MarkNotificationAsReadRequest
	MarkNotificationAsReadResponse = user.MarkNotificationAsReadResponse
	Notification                   = user.Notification
	NotificationListResponse       = user.NotificationListResponse
	RegisterRequest                = user.RegisterRequest
	RegisterResponse               = user.RegisterResponse
	ResetPasswordRequest           = user.ResetPasswordRequest
	ResetPasswordResponse          = user.ResetPasswordResponse
	SendVerificationCodeRequest    = user.SendVerificationCodeRequest
	SendVerificationCodeResponse   = user.SendVerificationCodeResponse
	UnfollowUserRequest            = user.UnfollowUserRequest
	UnfollowUserResponse           = user.UnfollowUserResponse
	UpdateUserInfoRequest          = user.UpdateUserInfoRequest
	UpdateUserInfoResponse         = user.UpdateUserInfoResponse
	UserInfoResponse               = user.UserInfoResponse
	UserProfileResponse            = user.UserProfileResponse
	VerifyCodeRequest              = user.VerifyCodeRequest
	VerifyCodeResponse             = user.VerifyCodeResponse

	UserService interface {
		// 账号密码登录
		LoginByPassword(ctx context.Context, in *LoginByPasswordRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 验证码登录
		LoginByVerificationCode(ctx context.Context, in *LoginByVerificationCodeRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 自动登录（仅用于开发环境测试）
		AutoLogin(ctx context.Context, in *AutoLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 用户注册
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 发送验证码
		SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...grpc.CallOption) (*SendVerificationCodeResponse, error)
		// 验证验证码
		VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error)
		// 重置密码
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
		// 获取当前用户信息
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		// 获取用户详细资料
		GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
		// 更新用户信息
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error)
		// 修改密码
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
		// 退出登录
		Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
		// 关注用户
		FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
		// 取消关注用户
		UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
		// 获取通知
		GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*NotificationListResponse, error)
		// 标记通知为已读
		MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// 账号密码登录
func (m *defaultUserService) LoginByPassword(ctx context.Context, in *LoginByPasswordRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.LoginByPassword(ctx, in, opts...)
}

// 验证码登录
func (m *defaultUserService) LoginByVerificationCode(ctx context.Context, in *LoginByVerificationCodeRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.LoginByVerificationCode(ctx, in, opts...)
}

// 自动登录（仅用于开发环境测试）
func (m *defaultUserService) AutoLogin(ctx context.Context, in *AutoLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.AutoLogin(ctx, in, opts...)
}

// 用户注册
func (m *defaultUserService) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 发送验证码
func (m *defaultUserService) SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...grpc.CallOption) (*SendVerificationCodeResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.SendVerificationCode(ctx, in, opts...)
}

// 验证验证码
func (m *defaultUserService) VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.VerifyCode(ctx, in, opts...)
}

// 重置密码
func (m *defaultUserService) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.ResetPassword(ctx, in, opts...)
}

// 获取当前用户信息
func (m *defaultUserService) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// 获取用户详细资料
func (m *defaultUserService) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUserProfile(ctx, in, opts...)
}

// 更新用户信息
func (m *defaultUserService) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*UpdateUserInfoResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 修改密码
func (m *defaultUserService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

// 退出登录
func (m *defaultUserService) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 关注用户
func (m *defaultUserService) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.FollowUser(ctx, in, opts...)
}

// 取消关注用户
func (m *defaultUserService) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UnfollowUser(ctx, in, opts...)
}

// 获取通知
func (m *defaultUserService) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*NotificationListResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetNotifications(ctx, in, opts...)
}

// 标记通知为已读
func (m *defaultUserService) MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.MarkNotificationAsRead(ctx, in, opts...)
}
