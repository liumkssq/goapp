// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupMembersFieldNames          = builder.RawFieldNames(&GroupMembers{})
	groupMembersRows                = strings.Join(groupMembersFieldNames, ",")
	groupMembersRowsExpectAutoSet   = strings.Join(stringx.Remove(groupMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupMembersRowsWithPlaceHolder = strings.Join(stringx.Remove(groupMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappGroupMembersIdPrefix            = "cache:goapp:groupMembers:id:"
	cacheGoappGroupMembersGroupIdUserIdPrefix = "cache:goapp:groupMembers:groupId:userId:"
)

type (
	groupMembersModel interface {
		Insert(ctx context.Context,session sqlx.Session, data *GroupMembers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupMembers, error)
		FindByGroudIdAndUserId(ctx context.Context, userId, groupId string)  (*GroupMembers, error)
		ListByUserId(ctx context.Context, userId string) ([]*GroupMembers, error)
		ListByGroupId(ctx context.Context, groupId string) ([]*GroupMembers, error)
		Update(ctx context.Context, data *GroupMembers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupMembersModel struct {
		sqlc.CachedConn
		table string
	}

	GroupMembers struct {
		Id         uint64        `db:"id"`          // 群成员ID
		GroupId    uint64        `db:"group_id"`    // 群组ID
		UserId     uint64        `db:"user_id"`     // 用户ID
		RoleLevel  int64         `db:"role_level"`  // 角色等级: 0-普通成员, 1-管理员, 2-群主
		JoinTime   time.Time     `db:"join_time"`   // 加入时间
		JoinSource sql.NullInt64 `db:"join_source"` // 加入来源: 0-搜索, 1-邀请, 2-扫码
		InviterId  sql.NullInt64 `db:"inviter_id"`  // 邀请人ID
		OperatorId sql.NullInt64 `db:"operator_id"` // 操作人ID
		CreateTime time.Time     `db:"create_time"` // 创建时间
		UpdateTime time.Time     `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime  `db:"delete_time"` // 删除时间
		DelState   int64         `db:"del_state"`   // 删除状态: 0-正常, 1-已删除
	}
)

func newGroupMembersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupMembersModel {
	return &defaultGroupMembersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_members`",
	}
}

func (m *defaultGroupMembersModel) Delete(ctx context.Context, id int64) error {
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGoappGroupMembersIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupMembersIdKey)
	return err
}

func (m *defaultGroupMembersModel) FindOne(ctx context.Context, id int64) (*GroupMembers, error) {
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGoappGroupMembersIdPrefix, id)
	var resp GroupMembers
	err := m.QueryRowCtx(ctx, &resp, groupMembersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMembersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMembersModel) FindByGroudIdAndUserId(ctx context.Context, userId, groupId string)  (*GroupMembers, error){
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `group_id` = ?", groupMembersRows, m.table)

	var resp GroupMembers
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, userId, groupId)
	switch err {
	case nil:
		return &resp, nil
	default:
		return nil, err
	}

}

func (m *defaultGroupMembersModel) ListByUserId(ctx context.Context, userId string) ([]*GroupMembers, error){
	query := fmt.Sprintf("select %s from %s where `user_id` = ?", groupMembersRows, m.table)

	var resp []*GroupMembers
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultGroupMembersModel) ListByGroupId(ctx context.Context, groupId string) ([]*GroupMembers, error){
	query := fmt.Sprintf("select %s from %s where `group_id` = ?", groupMembersRows, m.table)

	var resp []*GroupMembers
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, groupId)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}


func (m *defaultGroupMembersModel) Insert(ctx context.Context, session sqlx.Session,data *GroupMembers) (sql.Result, error) {
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGoappGroupMembersIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, groupMembersRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupId, data.UserId, data.RoleLevel, data.JoinTime, data.JoinSource,
				data.InviterId, data.OperatorId)
		}
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.RoleLevel, data.JoinTime, data.JoinSource,
			data.InviterId, data.OperatorId)
	}, groupMembersIdKey)
	return ret, err
}

func (m *defaultGroupMembersModel) Update(ctx context.Context, data *GroupMembers) error {
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGoappGroupMembersIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupMembersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GroupId, data.UserId, data.RoleLevel, data.JoinTime, data.JoinSource, data.InviterId, data.OperatorId, data.Id)
	}, groupMembersIdKey)
	return err
}

func (m *defaultGroupMembersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoappGroupMembersIdPrefix, primary)
}

func (m *defaultGroupMembersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMembersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupMembersModel) tableName() string {
	return m.table
}
