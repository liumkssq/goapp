// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupsFieldNames          = builder.RawFieldNames(&Groups{})
	groupsRows                = strings.Join(groupsFieldNames, ",")
	groupsRowsExpectAutoSet   = strings.Join(stringx.Remove(groupsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupsRowsWithPlaceHolder = strings.Join(stringx.Remove(groupsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappGroupsIdPrefix        = "cache:goapp:groups:id:"
	cacheGoappGroupsGroupCodePrefix = "cache:goapp:groups:groupCode:"
)

type (
	groupsModel interface {
		Trans(ctx context.Context, fn func(context.Context, sqlx.Session) error) error
		Insert(ctx context.Context, session sqlx.Session, data *Groups) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Groups, error)
		ListByGroupIds(ctx context.Context, ids []string) ([]*Groups, error)
		Update(ctx context.Context, data *Groups) error
		Delete(ctx context.Context, id string) error
	}

	defaultGroupsModel struct {
		sqlc.CachedConn
		table string
	}

	Groups struct {
		Id                 uint64         `db:"id"`                   // 群组ID
		GroupCode          string         `db:"group_code"`           // 群号
		Name               string         `db:"name"`                 // 群名称
		Icon               sql.NullString `db:"icon"`                 // 群图标
		Status             int64          `db:"status"`               // 状态: 0-禁用, 1-正常
		CreatorId          uint64         `db:"creator_id"`           // 创建者用户ID
		GroupType          int64          `db:"group_type"`           // 群类型: 0-普通群, 1-临时群, 2-系统群
		IsVerify           int64          `db:"is_verify"`            // 是否需要验证: 0-不需要, 1-需要
		Notification       sql.NullString `db:"notification"`         // 群公告
		NotificationUserId sql.NullInt64  `db:"notification_user_id"` // 公告发布人ID
		CreateTime         time.Time      `db:"create_time"`          // 创建时间
		UpdateTime         time.Time      `db:"update_time"`          // 更新时间
		DeleteTime         sql.NullTime   `db:"delete_time"`          // 删除时间
		DelState           int64          `db:"del_state"`            // 删除状态: 0-正常, 1-已删除
	}
)

func newGroupsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupsModel {
	return &defaultGroupsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`groups`",
	}
}

func (m *defaultGroupsModel) Trans(ctx context.Context, fn func(context.Context, sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultGroupsModel) Delete(ctx context.Context, id string) error {
	groupsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupsIdKey)
	return err
}

func (m *defaultGroupsModel) FindOne(ctx context.Context, id string) (*Groups, error) {
	groupsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupsIdPrefix, id)
	var resp Groups
	err := m.QueryRowCtx(ctx, &resp, groupsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupsModel) ListByGroupIds(ctx context.Context, ids []string) ([]*Groups, error) {
	if len(ids) == 0 {
		return []*Groups{}, nil
	}
	
	// 构建 WHERE id IN (id1, id2, ...) 语句
	placeholder := strings.Repeat("?,", len(ids)-1) + "?"
	query := fmt.Sprintf("select %s from %s where `id` in (%s)", groupsRows, m.table, placeholder)
	
	// 将字符串 ID 转为 interface{} 数组
	args := make([]interface{}, len(ids))
	for i, id := range ids {
		args[i] = id
	}
	
	var resp []*Groups
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, args...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultGroupsModel) Insert(ctx context.Context, session sqlx.Session, data *Groups) (sql.Result, error) {
	groupsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupsIdPrefix, data.Id)
	groupsGroupCodeKey := fmt.Sprintf("%s%v", cacheGoappGroupsGroupCodePrefix, data.GroupCode)
	
	var ret sql.Result
	var err error
	
	if session != nil {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupsRowsExpectAutoSet)
		ret, err = session.ExecCtx(ctx, query, data.GroupCode, data.Name, data.Icon, data.Status, data.CreatorId, 
			data.GroupType, data.IsVerify, data.Notification, data.NotificationUserId, data.DeleteTime, data.DelState)
	} else {
		ret, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
			query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupsRowsExpectAutoSet)
			return conn.ExecCtx(ctx, query, data.GroupCode, data.Name, data.Icon, data.Status, data.CreatorId, 
				data.GroupType, data.IsVerify, data.Notification, data.NotificationUserId, data.DeleteTime, data.DelState)
		}, groupsGroupCodeKey, groupsIdKey)
	}
	
	return ret, err
}

func (m *defaultGroupsModel) Update(ctx context.Context, data *Groups) error {
	groupsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupsIdPrefix, data.Id)
	groupsGroupCodeKey := fmt.Sprintf("%s%v", cacheGoappGroupsGroupCodePrefix, data.GroupCode)
	
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GroupCode, data.Name, data.Icon, data.Status, data.CreatorId, 
			data.GroupType, data.IsVerify, data.Notification, data.NotificationUserId, data.DeleteTime, data.DelState, data.Id)
	}, groupsGroupCodeKey, groupsIdKey)
	
	return err
}

func (m *defaultGroupsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoappGroupsIdPrefix, primary)
}

func (m *defaultGroupsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupsModel) tableName() string {
	return m.table
}
