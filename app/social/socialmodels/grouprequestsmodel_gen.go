// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupRequestsFieldNames          = builder.RawFieldNames(&GroupRequests{})
	groupRequestsRows                = strings.Join(groupRequestsFieldNames, ",")
	groupRequestsRowsExpectAutoSet   = strings.Join(stringx.Remove(groupRequestsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupRequestsRowsWithPlaceHolder = strings.Join(stringx.Remove(groupRequestsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappGroupRequestsIdPrefix = "cache:goapp:groupRequests:id:"
)

type (
	groupRequestsModel interface {
		Trans(ctx context.Context, fn func(context.Context, sqlx.Session) error) error

		Insert(ctx context.Context, data *GroupRequests) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupRequests, error)
		FindByGroupIdAndReqId(ctx context.Context, groupId, reqId string) (*GroupRequests, error)
		ListNoHandler(ctx context.Context, groupId string) ([]*GroupRequests, error)
		Update(ctx context.Context, session sqlx.Session, data *GroupRequests) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupRequestsModel struct {
		sqlc.CachedConn
		table string
	}

	GroupRequests struct {
		Id           uint64         `db:"id"`             // 入群请求ID
		ReqUserId    uint64         `db:"req_user_id"`    // 请求用户ID
		GroupId      uint64         `db:"group_id"`       // 群组ID
		ReqMsg       sql.NullString `db:"req_msg"`        // 请求消息
		ReqTime      time.Time      `db:"req_time"`       // 请求时间
		JoinSource   sql.NullInt64  `db:"join_source"`    // 来源: 0-搜索, 1-邀请, 2-扫码
		InviterId    sql.NullInt64  `db:"inviter_id"`     // 邀请人ID
		HandleUserId sql.NullInt64  `db:"handle_user_id"` // 处理人ID
		HandleTime   sql.NullTime   `db:"handle_time"`    // 处理时间
		HandleResult sql.NullInt64  `db:"handle_result"`  // 处理结果: 0-拒绝, 1-接受, 2-忽略
		CreateTime   time.Time      `db:"create_time"`    // 创建时间
		UpdateTime   time.Time      `db:"update_time"`    // 更新时间
		DeleteTime   sql.NullTime   `db:"delete_time"`    // 删除时间
		DelState     int64          `db:"del_state"`      // 删除状态: 0-正常, 1-已删除
	}
)

func newGroupRequestsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupRequestsModel {
	return &defaultGroupRequestsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_requests`",
	}
}

// func (m *defaultGroupRequestsModel) Delete(ctx context.Context, id uint64) error {
// 	goappGroupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, id)
// 	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
// 		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
// 		return conn.ExecCtx(ctx, query, id)
// 	}, goappGroupRequestsIdKey)
// 	return err
// }

// func (m *defaultGroupRequestsModel) FindOne(ctx context.Context, id uint64) (*GroupRequests, error) {
// 	goappGroupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, id)
// 	var resp GroupRequests
// 	err := m.QueryRowCtx(ctx, &resp, goappGroupRequestsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
// 		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRequestsRows, m.table)
// 		return conn.QueryRowCtx(ctx, v, query, id)
// 	})
// 	switch err {
// 	case nil:
// 		return &resp, nil
// 	case sqlc.ErrNotFound:
// 		return nil, ErrNotFound
// 	default:
// 		return nil, err
// 	}
// }

// func (m *defaultGroupRequestsModel) Insert(ctx context.Context, data *GroupRequests) (sql.Result, error) {
// 	goappGroupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, data.Id)
// 	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
// 		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupRequestsRowsExpectAutoSet)
// 		return conn.ExecCtx(ctx, query, data.ReqUserId, data.GroupId, data.ReqMsg, data.ReqTime, data.JoinSource, data.InviterId, data.HandleUserId, data.HandleTime, data.HandleResult, data.DeleteTime, data.DelState)
// 	}, goappGroupRequestsIdKey)
// 	return ret, err
// }

// func (m *defaultGroupRequestsModel) Update(ctx context.Context, data *GroupRequests) error {
// 	goappGroupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, data.Id)
// 	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
// 		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupRequestsRowsWithPlaceHolder)
// 		return conn.ExecCtx(ctx, query, data.ReqUserId, data.GroupId, data.ReqMsg, data.ReqTime, data.JoinSource, data.InviterId, data.HandleUserId, data.HandleTime, data.HandleResult, data.DeleteTime, data.DelState, data.Id)
// 	}, goappGroupRequestsIdKey)
// 	return err
// }


func (m *defaultGroupRequestsModel) Trans(ctx context.Context, fn func(context.Context, sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultGroupRequestsModel) Delete(ctx context.Context, id int64) error {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, groupRequestsIdKey)
	return err
}

func (m *defaultGroupRequestsModel) FindOne(ctx context.Context, id int64) (*GroupRequests, error) {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, id)
	var resp GroupRequests
	err := m.QueryRowCtx(ctx, &resp, groupRequestsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRequestsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupRequestsModel) FindByGroupIdAndReqId(ctx context.Context, groupId, reqId string) (*GroupRequests, error) {
	query := fmt.Sprintf("select %s from %s where `req_user_id` = ? and `group_id` = ?", groupRequestsRows, m.table)

	var resp GroupRequests
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, reqId, groupId)
	switch err {
	case nil:
		return &resp, nil
	default:
		return nil, err
	}
}

func (m *defaultGroupRequestsModel) ListNoHandler(ctx context.Context, groupId string) ([]*GroupRequests, error) {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? and `handle_result` = 1 ", groupRequestsRows, m.table)

	var resp []*GroupRequests
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, groupId)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultGroupRequestsModel) Insert(ctx context.Context, data *GroupRequests) (sql.Result, error) {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupRequestsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ReqUserId, data.GroupId, data.ReqMsg, data.ReqTime, data.JoinSource,
			data.InviterId, data.HandleUserId, data.HandleTime, data.HandleResult)
	}, groupRequestsIdKey)
	return ret, err
}

func (m *defaultGroupRequestsModel) Update(ctx context.Context, session sqlx.Session, data *GroupRequests) error {
	groupRequestsIdKey := fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupRequestsRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, data.ReqUserId, data.GroupId, data.ReqMsg, data.ReqTime, data.JoinSource,
			data.InviterId, data.HandleUserId, data.HandleTime, data.HandleResult, data.Id)
	}, groupRequestsIdKey)
	return err
}

func (m *defaultGroupRequestsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoappGroupRequestsIdPrefix, primary)
}

func (m *defaultGroupRequestsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupRequestsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupRequestsModel) tableName() string {
	return m.table
}
