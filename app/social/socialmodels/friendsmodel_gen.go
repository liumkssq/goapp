// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	friendsFieldNames          = builder.RawFieldNames(&Friends{})
	friendsRows                = strings.Join(friendsFieldNames, ",")
	friendsRowsExpectAutoSet   = strings.Join(stringx.Remove(friendsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	friendsRowsWithPlaceHolder = strings.Join(stringx.Remove(friendsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFriendsIdPrefix             = "cache:goapp:friends:id:"
	cacheFriendsUserIdFriendIdPrefix = "cache:goapp:friends:userId:friendId:"
)

type (
	friendsModel interface {
		Insert(ctx context.Context, data *Friends) (sql.Result, error)
		Inserts(ctx context.Context, session sqlx.Session, data ...*Friends) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Friends, error)
		FindByUidAndFid(ctx context.Context, uid, fid string) (*Friends, error)
		ListByUserid(ctx context.Context, userId string) ([]*Friends, error)
		Update(ctx context.Context, data *Friends) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFriendsModel struct {
		sqlc.CachedConn
		table string
	}

	Friends struct {
		Id         uint64         `db:"id"`          // 好友关系ID
		UserId     uint64         `db:"user_id"`     // 用户ID
		FriendId   uint64         `db:"friend_id"`   // 好友用户ID
		Remark     sql.NullString `db:"remark"`      // 好友备注
		AddSource  sql.NullInt64  `db:"add_source"`  // 添加来源: 0-搜索, 1-群聊, 2-附近的人
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime   `db:"delete_time"` // 删除时间
		DelState   int64          `db:"del_state"`   // 删除状态: 0-正常, 1-已删除
	}
)

func newFriendsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFriendsModel {
	return &defaultFriendsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`friends`",
	}
}

func (m *defaultFriendsModel) Delete(ctx context.Context, id int64) error {
	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, friendsIdKey)
	return err
}

func (m *defaultFriendsModel) FindOne(ctx context.Context, id int64) (*Friends, error) {
	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, id)
	var resp Friends
	err := m.QueryRowCtx(ctx, &resp, friendsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", friendsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) FindByUidAndFid(ctx context.Context, uid, fid string) (*Friends, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `friend_id` = ?", friendsRows, m.table)

	var resp Friends
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, uid, fid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) ListByUserid(ctx context.Context, userId string) ([]*Friends, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? ", friendsRows, m.table)

	var resp []*Friends
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultFriendsModel) Insert(ctx context.Context, data *Friends) (sql.Result, error) {
	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, friendsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FriendId, data.Remark, data.AddSource, data.CreateTime)
	}, friendsIdKey)
	return ret, err
}

func (m *defaultFriendsModel) Inserts(ctx context.Context, session sqlx.Session, data ...*Friends) (sql.Result, error) {
	var (
		sql  strings.Builder
		args []any
	)

	if len(data) == 0 {
		return nil, nil
	}

	// insert into tablename values(数据), (数据)
	sql.WriteString(fmt.Sprintf("insert into %s (%s) values ", m.table, friendsRowsExpectAutoSet))

	for i, v := range data {
		sql.WriteString("(?, ?, ?, ?, ?)")
		args = append(args, v.UserId, v.FriendId, v.Remark, v.AddSource, v.CreateTime)
		if i == len(data)-1 {
			break
		}

		sql.WriteString(",")
	}

	return session.ExecCtx(ctx, sql.String(), args...)
}

func (m *defaultFriendsModel) Update(ctx context.Context, data *Friends) error {
	friendsIdKey := fmt.Sprintf("%s%v", cacheFriendsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, friendsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.FriendId, data.Remark, data.AddSource, data.CreateTime, data.Id)
	}, friendsIdKey)
	return err
}

func (m *defaultFriendsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFriendsIdPrefix, primary)
}

func (m *defaultFriendsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", friendsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFriendsModel) tableName() string {
	return m.table
}
