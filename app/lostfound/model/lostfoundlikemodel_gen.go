// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lostFoundLikeFieldNames          = builder.RawFieldNames(&LostFoundLike{})
	lostFoundLikeRows                = strings.Join(lostFoundLikeFieldNames, ",")
	lostFoundLikeRowsExpectAutoSet   = strings.Join(stringx.Remove(lostFoundLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lostFoundLikeRowsWithPlaceHolder = strings.Join(stringx.Remove(lostFoundLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappLostFoundLikeIdPrefix                    = "cache:goapp:lostFoundLike:id:"
	cacheGoappLostFoundLikeUserIdLostFoundItemIdPrefix = "cache:goapp:lostFoundLike:userId:lostFoundItemId:"
)

type (
	lostFoundLikeModel interface {
		Insert(ctx context.Context, data *LostFoundLike) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LostFoundLike, error)
		FindOneByUserIdLostFoundItemId(ctx context.Context, userId uint64, lostFoundItemId uint64) (*LostFoundLike, error)
		Update(ctx context.Context, data *LostFoundLike) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLostFoundLikeModel struct {
		sqlc.CachedConn
		table string
	}

	LostFoundLike struct {
		Id              uint64    `db:"id"`                 // 主键
		UserId          uint64    `db:"user_id"`            // 用户ID
		LostFoundItemId uint64    `db:"lost_found_item_id"` // 失物招领记录ID
		CreatedAt       time.Time `db:"created_at"`         // 点赞时间
	}
)

func newLostFoundLikeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLostFoundLikeModel {
	return &defaultLostFoundLikeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lost_found_like`",
	}
}

func (m *defaultLostFoundLikeModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goappLostFoundLikeIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundLikeIdPrefix, id)
	goappLostFoundLikeUserIdLostFoundItemIdKey := fmt.Sprintf("%s%v:%v", cacheGoappLostFoundLikeUserIdLostFoundItemIdPrefix, data.UserId, data.LostFoundItemId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goappLostFoundLikeIdKey, goappLostFoundLikeUserIdLostFoundItemIdKey)
	return err
}

func (m *defaultLostFoundLikeModel) FindOne(ctx context.Context, id uint64) (*LostFoundLike, error) {
	goappLostFoundLikeIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundLikeIdPrefix, id)
	var resp LostFoundLike
	err := m.QueryRowCtx(ctx, &resp, goappLostFoundLikeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lostFoundLikeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLostFoundLikeModel) FindOneByUserIdLostFoundItemId(ctx context.Context, userId uint64, lostFoundItemId uint64) (*LostFoundLike, error) {
	goappLostFoundLikeUserIdLostFoundItemIdKey := fmt.Sprintf("%s%v:%v", cacheGoappLostFoundLikeUserIdLostFoundItemIdPrefix, userId, lostFoundItemId)
	var resp LostFoundLike
	err := m.QueryRowIndexCtx(ctx, &resp, goappLostFoundLikeUserIdLostFoundItemIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `lost_found_item_id` = ? limit 1", lostFoundLikeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, lostFoundItemId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLostFoundLikeModel) Insert(ctx context.Context, data *LostFoundLike) (sql.Result, error) {
	goappLostFoundLikeIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundLikeIdPrefix, data.Id)
	goappLostFoundLikeUserIdLostFoundItemIdKey := fmt.Sprintf("%s%v:%v", cacheGoappLostFoundLikeUserIdLostFoundItemIdPrefix, data.UserId, data.LostFoundItemId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, lostFoundLikeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.LostFoundItemId)
	}, goappLostFoundLikeIdKey, goappLostFoundLikeUserIdLostFoundItemIdKey)
	return ret, err
}

func (m *defaultLostFoundLikeModel) Update(ctx context.Context, newData *LostFoundLike) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goappLostFoundLikeIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundLikeIdPrefix, data.Id)
	goappLostFoundLikeUserIdLostFoundItemIdKey := fmt.Sprintf("%s%v:%v", cacheGoappLostFoundLikeUserIdLostFoundItemIdPrefix, data.UserId, data.LostFoundItemId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lostFoundLikeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.LostFoundItemId, newData.Id)
	}, goappLostFoundLikeIdKey, goappLostFoundLikeUserIdLostFoundItemIdKey)
	return err
}

func (m *defaultLostFoundLikeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappLostFoundLikeIdPrefix, primary)
}

func (m *defaultLostFoundLikeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lostFoundLikeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLostFoundLikeModel) tableName() string {
	return m.table
}
