// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lostFoundCommentFieldNames          = builder.RawFieldNames(&LostFoundComment{})
	lostFoundCommentRows                = strings.Join(lostFoundCommentFieldNames, ",")
	lostFoundCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(lostFoundCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lostFoundCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(lostFoundCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappLostFoundCommentIdPrefix = "cache:goapp:lostFoundComment:id:"
)

type (
	lostFoundCommentModel interface {
		Insert(ctx context.Context, data *LostFoundComment) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LostFoundComment, error)
		Update(ctx context.Context, data *LostFoundComment) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLostFoundCommentModel struct {
		sqlc.CachedConn
		table string
	}

	LostFoundComment struct {
		Id              uint64         `db:"id"`                 // 评论ID
		LostFoundItemId uint64         `db:"lost_found_item_id"` // 所属失物招领记录ID
		UserId          uint64         `db:"user_id"`            // 评论用户ID
		UserName        string         `db:"user_name"`          // 评论者名称
		UserAvatar      sql.NullString `db:"user_avatar"`        // 评论者头像
		Content         string         `db:"content"`            // 评论内容
		CreatedAt       time.Time      `db:"created_at"`         // 评论时间
	}
)

func newLostFoundCommentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLostFoundCommentModel {
	return &defaultLostFoundCommentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lost_found_comment`",
	}
}

func (m *defaultLostFoundCommentModel) Delete(ctx context.Context, id uint64) error {
	goappLostFoundCommentIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goappLostFoundCommentIdKey)
	return err
}

func (m *defaultLostFoundCommentModel) FindOne(ctx context.Context, id uint64) (*LostFoundComment, error) {
	goappLostFoundCommentIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundCommentIdPrefix, id)
	var resp LostFoundComment
	err := m.QueryRowCtx(ctx, &resp, goappLostFoundCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lostFoundCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLostFoundCommentModel) Insert(ctx context.Context, data *LostFoundComment) (sql.Result, error) {
	goappLostFoundCommentIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, lostFoundCommentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LostFoundItemId, data.UserId, data.UserName, data.UserAvatar, data.Content)
	}, goappLostFoundCommentIdKey)
	return ret, err
}

func (m *defaultLostFoundCommentModel) Update(ctx context.Context, data *LostFoundComment) error {
	goappLostFoundCommentIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lostFoundCommentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LostFoundItemId, data.UserId, data.UserName, data.UserAvatar, data.Content, data.Id)
	}, goappLostFoundCommentIdKey)
	return err
}

func (m *defaultLostFoundCommentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappLostFoundCommentIdPrefix, primary)
}

func (m *defaultLostFoundCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lostFoundCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLostFoundCommentModel) tableName() string {
	return m.table
}
