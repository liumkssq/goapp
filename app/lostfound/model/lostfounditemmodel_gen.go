// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lostFoundItemFieldNames          = builder.RawFieldNames(&LostFoundItem{})
	lostFoundItemRows                = strings.Join(lostFoundItemFieldNames, ",")
	lostFoundItemRowsExpectAutoSet   = strings.Join(stringx.Remove(lostFoundItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lostFoundItemRowsWithPlaceHolder = strings.Join(stringx.Remove(lostFoundItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoappLostFoundItemIdPrefix = "cache:goapp:lostFoundItem:id:"
)

type (
	lostFoundItemModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *LostFoundItem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LostFoundItem, error)
		FindOneBySn(ctx context.Context, sn string) (*LostFoundItem, error)
		Update(ctx context.Context, session sqlx.Session, data *LostFoundItem) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *LostFoundItem) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *LostFoundItem) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*LostFoundItem, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*LostFoundItem, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*LostFoundItem, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*LostFoundItem, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*LostFoundItem, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultLostFoundItemModel struct {
		sqlc.CachedConn
		table string
	}

	LostFoundItem struct {
		Id              uint64         `db:"id"`               // 失物招领记录ID
		Title           string         `db:"title"`            // 标题
		Description     string         `db:"description"`      // 详细描述
		Type            string         `db:"type"`             // 类型：lost（丢失） 或 found（招领）
		Category        sql.NullString `db:"category"`         // 分类，若有预定义分类可考虑独立表
		Location        sql.NullString `db:"location"`         // 大致位置信息，如校区或城市
		LocationDetail  sql.NullString `db:"location_detail"`  // 详细位置信息（例如：经纬度、具体地址）
		ContactInfo     sql.NullString `db:"contact_info"`     // 联系信息
		ContactWay      sql.NullString `db:"contact_way"`      // 联系方式，例如电话、微信等
		Images          sql.NullString `db:"images"`           // 图片列表，JSON 数组格式
		Status          string         `db:"status"`           // 状态：待处理、已找到、已认领、已关闭
		Tags            sql.NullString `db:"tags"`             // 标签列表，JSON 数组格式
		RewardInfo      sql.NullString `db:"reward_info"`      // 悬赏信息
		LostFoundTime   sql.NullTime   `db:"lost_found_time"`  // 丢失或拾取时间
		PublisherId     uint64         `db:"publisher_id"`     // 发布者ID，关联用户表
		PublisherName   string         `db:"publisher_name"`   // 发布者名称（冗余字段，方便展示）
		PublisherAvatar sql.NullString `db:"publisher_avatar"` // 发布者头像URL（冗余字段）
		ViewCount       uint64         `db:"view_count"`       // 浏览数
		LikeCount       uint64         `db:"like_count"`       // 点赞数
		CommentCount    uint64         `db:"comment_count"`    // 评论数
		CreatedAt       time.Time      `db:"created_at"`       // 创建时间
		UpdatedAt       time.Time      `db:"updated_at"`       // 更新时间
	}
)

func (m *defaultLostFoundItemModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultLostFoundItemModel) Insert(ctx context.Context, session sqlx.Session, data *LostFoundItem) (sql.Result, error) {
	lostFoundCacheKey := fmt.Sprintf("%s%v", cacheGoappLostFoundItemIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?,)", m.table, lostFoundItemRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Title, data.Description, data.Type, data.Category, data.Location, data.LocationDetail, data.ContactInfo, data.ContactWay, data.Images, data.Status, data.Tags, data.RewardInfo, data.LostFoundTime, data.PublisherId, data.PublisherName, data.PublisherAvatar, data.ViewCount, data.LikeCount, data.CommentCount, data.CreatedAt, data)
		}
		return conn.ExecCtx(ctx, query, data.Id, data.Title, data.Description, data.Type, data.Category, data.Location, data.LocationDetail, data.ContactInfo, data.ContactWay, data.Images, data.Status, data.Tags, data.RewardInfo, data.LostFoundTime, data.PublisherId, data.PublisherName, data.PublisherAvatar, data.ViewCount, data.LikeCount, data.CommentCount, data.CreatedAt, data)
	}, lostFoundCacheKey)
}

func (m *defaultLostFoundItemModel) FindOne(ctx context.Context, id int64) (*LostFoundItem, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) FindOneBySn(ctx context.Context, sn string) (*LostFoundItem, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) Update(ctx context.Context, session sqlx.Session, data *LostFoundItem) (sql.Result, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *LostFoundItem) error {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultLostFoundItemModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *LostFoundItem) error {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*LostFoundItem, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*LostFoundItem, error) {
	// order by
	selectBuilder := rowBuilder.Columns(lostFoundItemRows)
	if orderBy == "" {
		selectBuilder = selectBuilder.OrderBy("`id` desc")
	} else {
		selectBuilder = selectBuilder.OrderBy(orderBy)
	}
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	query, values, err := selectBuilder.Where("`id` > 1").Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}
	// 执行查询
	var resp []*LostFoundItem
	err = m.QueryRowsNoCache(&resp, query, values...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultLostFoundItemModel) FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*LostFoundItem, int64, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*LostFoundItem, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*LostFoundItem, error) {
	//TODO implement me
	panic("implement me")
}

func (m *defaultLostFoundItemModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	//TODO implement me
	panic("implement me")
}

func newLostFoundItemModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLostFoundItemModel {
	return &defaultLostFoundItemModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lost_found_item`",
	}
}

//func (m *defaultLostFoundItemModel) Delete(ctx context.Context, id uint64) error {
//	goappLostFoundItemIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundItemIdPrefix, id)
//	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
//		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
//		return conn.ExecCtx(ctx, query, id)
//	}, goappLostFoundItemIdKey)
//	return err
//}

//func (m *defaultLostFoundItemModel) FindOne(ctx context.Context, id uint64) (*LostFoundItem, error) {
//	goappLostFoundItemIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundItemIdPrefix, id)
//	var resp LostFoundItem
//	err := m.QueryRowCtx(ctx, &resp, goappLostFoundItemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
//		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lostFoundItemRows, m.table)
//		return conn.QueryRowCtx(ctx, v, query, id)
//	})
//	switch err {
//	case nil:
//		return &resp, nil
//	case sqlc.ErrNotFound:
//		return nil, ErrNotFound
//	default:
//		return nil, err
//	}
//}

//func (m *defaultLostFoundItemModel) Insert(ctx context.Context, data *LostFoundItem) (sql.Result, error) {
//	goappLostFoundItemIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundItemIdPrefix, data.Id)
//	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
//		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lostFoundItemRowsExpectAutoSet)
//		return conn.ExecCtx(ctx, query, data.Title, data.Description, data.Type, data.Category, data.Location, data.LocationDetail, data.ContactInfo, data.ContactWay, data.Images, data.Status, data.Tags, data.RewardInfo, data.LostFoundTime, data.PublisherId, data.PublisherName, data.PublisherAvatar, data.ViewCount, data.LikeCount, data.CommentCount)
//	}, goappLostFoundItemIdKey)
//	return ret, err
//}

//func (m *defaultLostFoundItemModel) Update(ctx context.Context, data *LostFoundItem) error {
//	goappLostFoundItemIdKey := fmt.Sprintf("%s%v", cacheGoappLostFoundItemIdPrefix, data.Id)
//	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
//		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lostFoundItemRowsWithPlaceHolder)
//		return conn.ExecCtx(ctx, query, data.Title, data.Description, data.Type, data.Category, data.Location, data.LocationDetail, data.ContactInfo, data.ContactWay, data.Images, data.Status, data.Tags, data.RewardInfo, data.LostFoundTime, data.PublisherId, data.PublisherName, data.PublisherAvatar, data.ViewCount, data.LikeCount, data.CommentCount, data.Id)
//	}, goappLostFoundItemIdKey)
//	return err
//}

func (m *defaultLostFoundItemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoappLostFoundItemIdPrefix, primary)
}

func (m *defaultLostFoundItemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lostFoundItemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLostFoundItemModel) tableName() string {
	return m.table
}
