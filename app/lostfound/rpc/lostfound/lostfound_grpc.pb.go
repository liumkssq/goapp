// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.9
// source: lostfound.proto

package lostfound

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LostFoundService_GetLostFoundList_FullMethodName      = "/lostfound.LostFoundService/GetLostFoundList"
	LostFoundService_GetLostFoundDetail_FullMethodName    = "/lostfound.LostFoundService/GetLostFoundDetail"
	LostFoundService_GetUserLostFound_FullMethodName      = "/lostfound.LostFoundService/GetUserLostFound"
	LostFoundService_PublishLostFound_FullMethodName      = "/lostfound.LostFoundService/PublishLostFound"
	LostFoundService_UpdateLostFound_FullMethodName       = "/lostfound.LostFoundService/UpdateLostFound"
	LostFoundService_DeleteLostFound_FullMethodName       = "/lostfound.LostFoundService/DeleteLostFound"
	LostFoundService_UpdateLostFoundStatus_FullMethodName = "/lostfound.LostFoundService/UpdateLostFoundStatus"
	LostFoundService_CommentLostFound_FullMethodName      = "/lostfound.LostFoundService/CommentLostFound"
	LostFoundService_GetLostFoundComments_FullMethodName  = "/lostfound.LostFoundService/GetLostFoundComments"
	LostFoundService_LikeLostFound_FullMethodName         = "/lostfound.LostFoundService/LikeLostFound"
	LostFoundService_UnlikeLostFound_FullMethodName       = "/lostfound.LostFoundService/UnlikeLostFound"
)

// LostFoundServiceClient is the client API for LostFoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 失物招领服务
type LostFoundServiceClient interface {
	// 获取失物招领列表
	GetLostFoundList(ctx context.Context, in *GetLostFoundListRequest, opts ...grpc.CallOption) (*GetLostFoundListResponse, error)
	// 获取失物招领详情
	GetLostFoundDetail(ctx context.Context, in *GetLostFoundDetailRequest, opts ...grpc.CallOption) (*GetLostFoundDetailResponse, error)
	// 获取用户发布的失物招领
	GetUserLostFound(ctx context.Context, in *GetUserLostFoundRequest, opts ...grpc.CallOption) (*GetUserLostFoundResponse, error)
	// 发布失物招领
	PublishLostFound(ctx context.Context, in *PublishLostFoundRequest, opts ...grpc.CallOption) (*PublishLostFoundResponse, error)
	// 更新失物招领
	UpdateLostFound(ctx context.Context, in *UpdateLostFoundRequest, opts ...grpc.CallOption) (*UpdateLostFoundResponse, error)
	// 删除失物招领
	DeleteLostFound(ctx context.Context, in *DeleteLostFoundRequest, opts ...grpc.CallOption) (*DeleteLostFoundResponse, error)
	// 更新失物招领状态
	UpdateLostFoundStatus(ctx context.Context, in *UpdateLostFoundStatusRequest, opts ...grpc.CallOption) (*UpdateLostFoundStatusResponse, error)
	// 评论失物招领
	CommentLostFound(ctx context.Context, in *CommentLostFoundRequest, opts ...grpc.CallOption) (*CommentLostFoundResponse, error)
	// 获取失物招领评论
	GetLostFoundComments(ctx context.Context, in *GetLostFoundCommentsRequest, opts ...grpc.CallOption) (*GetLostFoundCommentsResponse, error)
	// 点赞失物招领
	LikeLostFound(ctx context.Context, in *LikeLostFoundRequest, opts ...grpc.CallOption) (*LikeLostFoundResponse, error)
	// 取消点赞失物招领
	UnlikeLostFound(ctx context.Context, in *UnlikeLostFoundRequest, opts ...grpc.CallOption) (*UnlikeLostFoundResponse, error)
}

type lostFoundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLostFoundServiceClient(cc grpc.ClientConnInterface) LostFoundServiceClient {
	return &lostFoundServiceClient{cc}
}

func (c *lostFoundServiceClient) GetLostFoundList(ctx context.Context, in *GetLostFoundListRequest, opts ...grpc.CallOption) (*GetLostFoundListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLostFoundListResponse)
	err := c.cc.Invoke(ctx, LostFoundService_GetLostFoundList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) GetLostFoundDetail(ctx context.Context, in *GetLostFoundDetailRequest, opts ...grpc.CallOption) (*GetLostFoundDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLostFoundDetailResponse)
	err := c.cc.Invoke(ctx, LostFoundService_GetLostFoundDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) GetUserLostFound(ctx context.Context, in *GetUserLostFoundRequest, opts ...grpc.CallOption) (*GetUserLostFoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLostFoundResponse)
	err := c.cc.Invoke(ctx, LostFoundService_GetUserLostFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) PublishLostFound(ctx context.Context, in *PublishLostFoundRequest, opts ...grpc.CallOption) (*PublishLostFoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishLostFoundResponse)
	err := c.cc.Invoke(ctx, LostFoundService_PublishLostFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) UpdateLostFound(ctx context.Context, in *UpdateLostFoundRequest, opts ...grpc.CallOption) (*UpdateLostFoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLostFoundResponse)
	err := c.cc.Invoke(ctx, LostFoundService_UpdateLostFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) DeleteLostFound(ctx context.Context, in *DeleteLostFoundRequest, opts ...grpc.CallOption) (*DeleteLostFoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLostFoundResponse)
	err := c.cc.Invoke(ctx, LostFoundService_DeleteLostFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) UpdateLostFoundStatus(ctx context.Context, in *UpdateLostFoundStatusRequest, opts ...grpc.CallOption) (*UpdateLostFoundStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLostFoundStatusResponse)
	err := c.cc.Invoke(ctx, LostFoundService_UpdateLostFoundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) CommentLostFound(ctx context.Context, in *CommentLostFoundRequest, opts ...grpc.CallOption) (*CommentLostFoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentLostFoundResponse)
	err := c.cc.Invoke(ctx, LostFoundService_CommentLostFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) GetLostFoundComments(ctx context.Context, in *GetLostFoundCommentsRequest, opts ...grpc.CallOption) (*GetLostFoundCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLostFoundCommentsResponse)
	err := c.cc.Invoke(ctx, LostFoundService_GetLostFoundComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) LikeLostFound(ctx context.Context, in *LikeLostFoundRequest, opts ...grpc.CallOption) (*LikeLostFoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeLostFoundResponse)
	err := c.cc.Invoke(ctx, LostFoundService_LikeLostFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lostFoundServiceClient) UnlikeLostFound(ctx context.Context, in *UnlikeLostFoundRequest, opts ...grpc.CallOption) (*UnlikeLostFoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikeLostFoundResponse)
	err := c.cc.Invoke(ctx, LostFoundService_UnlikeLostFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LostFoundServiceServer is the server API for LostFoundService service.
// All implementations must embed UnimplementedLostFoundServiceServer
// for forward compatibility.
//
// 失物招领服务
type LostFoundServiceServer interface {
	// 获取失物招领列表
	GetLostFoundList(context.Context, *GetLostFoundListRequest) (*GetLostFoundListResponse, error)
	// 获取失物招领详情
	GetLostFoundDetail(context.Context, *GetLostFoundDetailRequest) (*GetLostFoundDetailResponse, error)
	// 获取用户发布的失物招领
	GetUserLostFound(context.Context, *GetUserLostFoundRequest) (*GetUserLostFoundResponse, error)
	// 发布失物招领
	PublishLostFound(context.Context, *PublishLostFoundRequest) (*PublishLostFoundResponse, error)
	// 更新失物招领
	UpdateLostFound(context.Context, *UpdateLostFoundRequest) (*UpdateLostFoundResponse, error)
	// 删除失物招领
	DeleteLostFound(context.Context, *DeleteLostFoundRequest) (*DeleteLostFoundResponse, error)
	// 更新失物招领状态
	UpdateLostFoundStatus(context.Context, *UpdateLostFoundStatusRequest) (*UpdateLostFoundStatusResponse, error)
	// 评论失物招领
	CommentLostFound(context.Context, *CommentLostFoundRequest) (*CommentLostFoundResponse, error)
	// 获取失物招领评论
	GetLostFoundComments(context.Context, *GetLostFoundCommentsRequest) (*GetLostFoundCommentsResponse, error)
	// 点赞失物招领
	LikeLostFound(context.Context, *LikeLostFoundRequest) (*LikeLostFoundResponse, error)
	// 取消点赞失物招领
	UnlikeLostFound(context.Context, *UnlikeLostFoundRequest) (*UnlikeLostFoundResponse, error)
	mustEmbedUnimplementedLostFoundServiceServer()
}

// UnimplementedLostFoundServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLostFoundServiceServer struct{}

func (UnimplementedLostFoundServiceServer) GetLostFoundList(context.Context, *GetLostFoundListRequest) (*GetLostFoundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLostFoundList not implemented")
}
func (UnimplementedLostFoundServiceServer) GetLostFoundDetail(context.Context, *GetLostFoundDetailRequest) (*GetLostFoundDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLostFoundDetail not implemented")
}
func (UnimplementedLostFoundServiceServer) GetUserLostFound(context.Context, *GetUserLostFoundRequest) (*GetUserLostFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLostFound not implemented")
}
func (UnimplementedLostFoundServiceServer) PublishLostFound(context.Context, *PublishLostFoundRequest) (*PublishLostFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLostFound not implemented")
}
func (UnimplementedLostFoundServiceServer) UpdateLostFound(context.Context, *UpdateLostFoundRequest) (*UpdateLostFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLostFound not implemented")
}
func (UnimplementedLostFoundServiceServer) DeleteLostFound(context.Context, *DeleteLostFoundRequest) (*DeleteLostFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLostFound not implemented")
}
func (UnimplementedLostFoundServiceServer) UpdateLostFoundStatus(context.Context, *UpdateLostFoundStatusRequest) (*UpdateLostFoundStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLostFoundStatus not implemented")
}
func (UnimplementedLostFoundServiceServer) CommentLostFound(context.Context, *CommentLostFoundRequest) (*CommentLostFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentLostFound not implemented")
}
func (UnimplementedLostFoundServiceServer) GetLostFoundComments(context.Context, *GetLostFoundCommentsRequest) (*GetLostFoundCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLostFoundComments not implemented")
}
func (UnimplementedLostFoundServiceServer) LikeLostFound(context.Context, *LikeLostFoundRequest) (*LikeLostFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeLostFound not implemented")
}
func (UnimplementedLostFoundServiceServer) UnlikeLostFound(context.Context, *UnlikeLostFoundRequest) (*UnlikeLostFoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeLostFound not implemented")
}
func (UnimplementedLostFoundServiceServer) mustEmbedUnimplementedLostFoundServiceServer() {}
func (UnimplementedLostFoundServiceServer) testEmbeddedByValue()                          {}

// UnsafeLostFoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LostFoundServiceServer will
// result in compilation errors.
type UnsafeLostFoundServiceServer interface {
	mustEmbedUnimplementedLostFoundServiceServer()
}

func RegisterLostFoundServiceServer(s grpc.ServiceRegistrar, srv LostFoundServiceServer) {
	// If the following call pancis, it indicates UnimplementedLostFoundServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LostFoundService_ServiceDesc, srv)
}

func _LostFoundService_GetLostFoundList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLostFoundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).GetLostFoundList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_GetLostFoundList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).GetLostFoundList(ctx, req.(*GetLostFoundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_GetLostFoundDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLostFoundDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).GetLostFoundDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_GetLostFoundDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).GetLostFoundDetail(ctx, req.(*GetLostFoundDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_GetUserLostFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLostFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).GetUserLostFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_GetUserLostFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).GetUserLostFound(ctx, req.(*GetUserLostFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_PublishLostFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishLostFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).PublishLostFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_PublishLostFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).PublishLostFound(ctx, req.(*PublishLostFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_UpdateLostFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLostFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).UpdateLostFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_UpdateLostFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).UpdateLostFound(ctx, req.(*UpdateLostFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_DeleteLostFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLostFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).DeleteLostFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_DeleteLostFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).DeleteLostFound(ctx, req.(*DeleteLostFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_UpdateLostFoundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLostFoundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).UpdateLostFoundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_UpdateLostFoundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).UpdateLostFoundStatus(ctx, req.(*UpdateLostFoundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_CommentLostFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentLostFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).CommentLostFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_CommentLostFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).CommentLostFound(ctx, req.(*CommentLostFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_GetLostFoundComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLostFoundCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).GetLostFoundComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_GetLostFoundComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).GetLostFoundComments(ctx, req.(*GetLostFoundCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_LikeLostFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeLostFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).LikeLostFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_LikeLostFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).LikeLostFound(ctx, req.(*LikeLostFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LostFoundService_UnlikeLostFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeLostFoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LostFoundServiceServer).UnlikeLostFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LostFoundService_UnlikeLostFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LostFoundServiceServer).UnlikeLostFound(ctx, req.(*UnlikeLostFoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LostFoundService_ServiceDesc is the grpc.ServiceDesc for LostFoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LostFoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lostfound.LostFoundService",
	HandlerType: (*LostFoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLostFoundList",
			Handler:    _LostFoundService_GetLostFoundList_Handler,
		},
		{
			MethodName: "GetLostFoundDetail",
			Handler:    _LostFoundService_GetLostFoundDetail_Handler,
		},
		{
			MethodName: "GetUserLostFound",
			Handler:    _LostFoundService_GetUserLostFound_Handler,
		},
		{
			MethodName: "PublishLostFound",
			Handler:    _LostFoundService_PublishLostFound_Handler,
		},
		{
			MethodName: "UpdateLostFound",
			Handler:    _LostFoundService_UpdateLostFound_Handler,
		},
		{
			MethodName: "DeleteLostFound",
			Handler:    _LostFoundService_DeleteLostFound_Handler,
		},
		{
			MethodName: "UpdateLostFoundStatus",
			Handler:    _LostFoundService_UpdateLostFoundStatus_Handler,
		},
		{
			MethodName: "CommentLostFound",
			Handler:    _LostFoundService_CommentLostFound_Handler,
		},
		{
			MethodName: "GetLostFoundComments",
			Handler:    _LostFoundService_GetLostFoundComments_Handler,
		},
		{
			MethodName: "LikeLostFound",
			Handler:    _LostFoundService_LikeLostFound_Handler,
		},
		{
			MethodName: "UnlikeLostFound",
			Handler:    _LostFoundService_UnlikeLostFound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lostfound.proto",
}
