// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: lostfound.proto

package server

import (
	"context"

	"github.com/liumkssq/goapp/app/lostfound/rpc/internal/logic"
	"github.com/liumkssq/goapp/app/lostfound/rpc/internal/svc"
	"github.com/liumkssq/goapp/app/lostfound/rpc/lostfound"
)

type LostFoundServiceServer struct {
	svcCtx *svc.ServiceContext
	lostfound.UnimplementedLostFoundServiceServer
}

func NewLostFoundServiceServer(svcCtx *svc.ServiceContext) *LostFoundServiceServer {
	return &LostFoundServiceServer{
		svcCtx: svcCtx,
	}
}

// 获取失物招领列表
func (s *LostFoundServiceServer) GetLostFoundList(ctx context.Context, in *lostfound.GetLostFoundListRequest) (*lostfound.GetLostFoundListResponse, error) {
	l := logic.NewGetLostFoundListLogic(ctx, s.svcCtx)
	return l.GetLostFoundList(in)
}

// 获取失物招领详情
func (s *LostFoundServiceServer) GetLostFoundDetail(ctx context.Context, in *lostfound.GetLostFoundDetailRequest) (*lostfound.GetLostFoundDetailResponse, error) {
	l := logic.NewGetLostFoundDetailLogic(ctx, s.svcCtx)
	return l.GetLostFoundDetail(in)
}

// 获取用户发布的失物招领
func (s *LostFoundServiceServer) GetUserLostFound(ctx context.Context, in *lostfound.GetUserLostFoundRequest) (*lostfound.GetUserLostFoundResponse, error) {
	l := logic.NewGetUserLostFoundLogic(ctx, s.svcCtx)
	return l.GetUserLostFound(in)
}

// 发布失物招领
func (s *LostFoundServiceServer) PublishLostFound(ctx context.Context, in *lostfound.PublishLostFoundRequest) (*lostfound.PublishLostFoundResponse, error) {
	l := logic.NewPublishLostFoundLogic(ctx, s.svcCtx)
	return l.PublishLostFound(in)
}

// 更新失物招领
func (s *LostFoundServiceServer) UpdateLostFound(ctx context.Context, in *lostfound.UpdateLostFoundRequest) (*lostfound.UpdateLostFoundResponse, error) {
	l := logic.NewUpdateLostFoundLogic(ctx, s.svcCtx)
	return l.UpdateLostFound(in)
}

// 删除失物招领
func (s *LostFoundServiceServer) DeleteLostFound(ctx context.Context, in *lostfound.DeleteLostFoundRequest) (*lostfound.DeleteLostFoundResponse, error) {
	l := logic.NewDeleteLostFoundLogic(ctx, s.svcCtx)
	return l.DeleteLostFound(in)
}

// 更新失物招领状态
func (s *LostFoundServiceServer) UpdateLostFoundStatus(ctx context.Context, in *lostfound.UpdateLostFoundStatusRequest) (*lostfound.UpdateLostFoundStatusResponse, error) {
	l := logic.NewUpdateLostFoundStatusLogic(ctx, s.svcCtx)
	return l.UpdateLostFoundStatus(in)
}

// 评论失物招领
func (s *LostFoundServiceServer) CommentLostFound(ctx context.Context, in *lostfound.CommentLostFoundRequest) (*lostfound.CommentLostFoundResponse, error) {
	l := logic.NewCommentLostFoundLogic(ctx, s.svcCtx)
	return l.CommentLostFound(in)
}

// 获取失物招领评论
func (s *LostFoundServiceServer) GetLostFoundComments(ctx context.Context, in *lostfound.GetLostFoundCommentsRequest) (*lostfound.GetLostFoundCommentsResponse, error) {
	l := logic.NewGetLostFoundCommentsLogic(ctx, s.svcCtx)
	return l.GetLostFoundComments(in)
}

// 点赞失物招领
func (s *LostFoundServiceServer) LikeLostFound(ctx context.Context, in *lostfound.LikeLostFoundRequest) (*lostfound.LikeLostFoundResponse, error) {
	l := logic.NewLikeLostFoundLogic(ctx, s.svcCtx)
	return l.LikeLostFound(in)
}

// 取消点赞失物招领
func (s *LostFoundServiceServer) UnlikeLostFound(ctx context.Context, in *lostfound.UnlikeLostFoundRequest) (*lostfound.UnlikeLostFoundResponse, error) {
	l := logic.NewUnlikeLostFoundLogic(ctx, s.svcCtx)
	return l.UnlikeLostFound(in)
}
