syntax = "v1"

info (
    title: "用户服务接口"
    desc: "用户认证、信息管理等功能"
    author: "Campus Team"
    version: "1.0"
)

// 定义请求/响应类型
type (
    // 登录请求
    LoginReq {
        Username string `json:"username,optional"` // 用户名/手机号/邮箱
        Password string `json:"password,optional"` // 密码
        Phone string `json:"phone,optional"` // 手机号
        VerificationCode string `json:"verificationCode,optional"` // 验证码
    }

    // 登录响应
    LoginResp {
        UserId int64 `json:"userId"`
        Username string `json:"username"`
        Avatar string `json:"avatar,optional"`
        Email string `json:"email,optional"`
        AccessToken string `json:"accessToken"`
        AccessExpire int64 `json:"accessExpire"`
        RefreshAfter int64 `json:"refreshAfter"`
    }

    // 注册请求
    RegisterReq {
        Username string `json:"username"` // 用户名
        Password string `json:"password"` // 密码
        Phone string `json:"phone"` // 手机号
        VerificationCode string `json:"verificationCode"` // 验证码
    }

    // 注册响应
    RegisterResp {
        UserId int64 `json:"userId"`
        Username string `json:"username"`
        AccessToken string `json:"accessToken"`
        AccessExpire int64 `json:"accessExpire"`
        RefreshAfter int64 `json:"refreshAfter"`
    }

    // 用户信息
    UserInfo {
        UserId int64 `json:"userId"`
        Username string `json:"username"`
        Avatar string `json:"avatar,optional"`
        Email string `json:"email,optional"`
        Phone string `json:"phone,optional"`
        Bio string `json:"bio,optional"`
        Gender string `json:"gender,optional"`
        Location string `json:"location,optional"`
        CreatedAt string `json:"createdAt,optional"`
        UpdatedAt string `json:"updatedAt,optional"`
    }

    // 用户信息响应
    UserInfoResp {
        User UserInfo `json:"user"`
    }

    // 用户详细资料请求
    UserProfileReq {
        UserId int64 `path:"id"`
    }

    // 用户详细资料响应
    UserProfileResp {
        User UserInfo `json:"user"`
        FollowersCount int64 `json:"followersCount"`
        FollowingCount int64 `json:"followingCount"`
        IsFollowing bool `json:"isFollowing"`
    }

    // 更新用户信息请求
    UpdateUserInfoReq {
        Username string `json:"username,optional"`
        Avatar string `json:"avatar,optional"`
        Email string `json:"email,optional"`
        Bio string `json:"bio,optional"`
        Gender string `json:"gender,optional"`
        Location string `json:"location,optional"`
    }

    // 更新用户信息响应
    UpdateUserInfoResp {
        Message string `json:"message"`
    }

    // 修改密码请求
    ChangePasswordReq {
        OldPassword string `json:"oldPassword"`
        NewPassword string `json:"newPassword"`
    }

    // 修改密码响应
    ChangePasswordResp {
        Message string `json:"message"`
    }

    // 发送验证码请求
    SendVerificationCodeReq {
        Phone string `json:"phone"`
        Type string `json:"type,optional"` // 类型: register, login, resetPassword
    }

    // 发送验证码响应
    SendVerificationCodeResp {
        Message string `json:"message"`
    }

    // 重置密码请求
    ResetPasswordReq {
        Phone string `json:"phone"`
        VerificationCode string `json:"verificationCode"`
        NewPassword string `json:"newPassword"`
    }

    // 重置密码响应
    ResetPasswordResp {
        Message string `json:"message"`
    }

    // 验证验证码请求
    VerifyCodeReq {
        Phone string `json:"phone"`
        VerificationCode string `json:"verificationCode"`
        Type string `json:"type"`
    }

    // 验证验证码响应
    VerifyCodeResp {
        Valid bool `json:"valid"`
        Message string `json:"message"`
    }

    // 通知
    Notification {
        Id int64 `json:"id"`
        Type string `json:"type"`
        Title string `json:"title"`
        Content string `json:"content"`
        IsRead bool `json:"isRead"`
        CreatedAt string `json:"createdAt"`
    }

    // 获取通知响应
    NotificationsResp {
        Notifications []Notification `json:"notifications"`
        UnreadCount int64 `json:"unreadCount"`
    }

    // 标记通知已读请求
    MarkNotificationAsReadReq {
        NotificationId int64 `path:"id"`
    }

    // 标记通知已读响应
    MarkNotificationAsReadResp {
        Message string `json:"message"`
    }

    // 关注用户请求
    FollowUserReq {
        UserId int64 `path:"id"`
    }

    // 关注用户响应
    FollowUserResp {
        Message string `json:"message"`
    }

    // 取消关注用户请求
    UnfollowUserReq {
        UserId int64 `path:"id"`
    }

    // 取消关注用户响应
    UnfollowUserResp {
        Message string `json:"message"`
    }

    // 通用响应
    CommonResp {
        Message string `json:"message"`
    }
)

@server(
    prefix: /api/user
)
service User {
    // 用户登录
    @handler Login
    post /login (LoginReq) returns (LoginResp)

    // 用户注册
    @handler Register
    post /register (RegisterReq) returns (RegisterResp)

    // 发送验证码
    @handler SendVerificationCode
    post /verification-code (SendVerificationCodeReq) returns (SendVerificationCodeResp)

    // 验证验证码
    @handler VerifyCode
    post /verify-code (VerifyCodeReq) returns (VerifyCodeResp)

    // 重置密码
    @handler ResetPassword
    post /reset-password (ResetPasswordReq) returns (ResetPasswordResp)
}

@server(
    prefix: /api/user
    jwt: Auth
)
service User {
    // 获取当前用户信息
    @handler GetUserInfo
    get /info returns (UserInfoResp)

    // 更新用户信息
    @handler UpdateUserInfo
    put /info (UpdateUserInfoReq) returns (UpdateUserInfoResp)

    // 获取用户详细资料
    @handler GetUserProfile
    get /profile/:id (UserProfileReq) returns (UserProfileResp)

    // 修改密码
    @handler ChangePassword
    put /password (ChangePasswordReq) returns (ChangePasswordResp)

    // 退出登录
    @handler Logout
    post /logout returns (CommonResp)

    // 获取通知
    @handler GetNotifications
    get /notifications returns (NotificationsResp)

    // 标记通知为已读
    @handler MarkNotificationAsRead
    put /notifications/:id/read (MarkNotificationAsReadReq) returns (MarkNotificationAsReadResp)

    // 关注用户
    @handler FollowUser
    post /follow/:id (FollowUserReq) returns (FollowUserResp)

    // 取消关注用户
    @handler UnfollowUser
    post /unfollow/:id (UnfollowUserReq) returns (UnfollowUserResp)
}